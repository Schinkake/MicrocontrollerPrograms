
USART_Data_Receiver_and_TWI_Displayer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002f6  0000038a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae5  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c4  00000000  00000000  00000f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051e  00000000  00000000  0000171d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a9  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_24>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  68:	f2 00       	.word	0x00f2	; ????
  6a:	1c 01       	movw	r2, r24
  6c:	1c 01       	movw	r2, r24
  6e:	1c 01       	movw	r2, r24
  70:	1c 01       	movw	r2, r24
  72:	1c 01       	movw	r2, r24
  74:	1c 01       	movw	r2, r24
  76:	1c 01       	movw	r2, r24
  78:	f6 00       	.word	0x00f6	; ????
  7a:	1c 01       	movw	r2, r24
  7c:	1c 01       	movw	r2, r24
  7e:	1c 01       	movw	r2, r24
  80:	1c 01       	movw	r2, r24
  82:	1c 01       	movw	r2, r24
  84:	1c 01       	movw	r2, r24
  86:	1c 01       	movw	r2, r24
  88:	fa 00       	.word	0x00fa	; ????
  8a:	1c 01       	movw	r2, r24
  8c:	1c 01       	movw	r2, r24
  8e:	1c 01       	movw	r2, r24
  90:	1c 01       	movw	r2, r24
  92:	1c 01       	movw	r2, r24
  94:	1c 01       	movw	r2, r24
  96:	1c 01       	movw	r2, r24
  98:	fe 00       	.word	0x00fe	; ????
  9a:	1c 01       	movw	r2, r24
  9c:	1c 01       	movw	r2, r24
  9e:	1c 01       	movw	r2, r24
  a0:	1c 01       	movw	r2, r24
  a2:	1c 01       	movw	r2, r24
  a4:	1c 01       	movw	r2, r24
  a6:	1c 01       	movw	r2, r24
  a8:	01 01       	movw	r0, r2
  aa:	1c 01       	movw	r2, r24
  ac:	1c 01       	movw	r2, r24
  ae:	1c 01       	movw	r2, r24
  b0:	1c 01       	movw	r2, r24
  b2:	1c 01       	movw	r2, r24
  b4:	1c 01       	movw	r2, r24
  b6:	1c 01       	movw	r2, r24
  b8:	13 01       	movw	r2, r6
  ba:	1c 01       	movw	r2, r24
  bc:	1c 01       	movw	r2, r24
  be:	1c 01       	movw	r2, r24
  c0:	1c 01       	movw	r2, r24
  c2:	1c 01       	movw	r2, r24
  c4:	1c 01       	movw	r2, r24
  c6:	1c 01       	movw	r2, r24
  c8:	16 01       	movw	r2, r12

000000ca <__ctors_end>:
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf ef       	ldi	r28, 0xFF	; 255
  d0:	d8 e0       	ldi	r29, 0x08	; 8
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
  d6:	11 e0       	ldi	r17, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	e6 ef       	ldi	r30, 0xF6	; 246
  de:	f2 e0       	ldi	r31, 0x02	; 2
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
  e2:	05 90       	lpm	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	aa 30       	cpi	r26, 0x0A	; 10
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	aa e0       	ldi	r26, 0x0A	; 10
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	ab 30       	cpi	r26, 0x0B	; 11
  f8:	b2 07       	cpc	r27, r18
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
  fc:	0e 94 33 01 	call	0x266	; 0x266 <main>
 100:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <__vector_24>:
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
}

void recieveDataByte() {
	TWCR |= (1 << TWINT) | (1 << TWEA);
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 118:	88 7f       	andi	r24, 0xF8	; 248
 11a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <USART_Init>:
 12a:	87 e6       	ldi	r24, 0x67	; 103
 12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 130:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 134:	88 e1       	ldi	r24, 0x18	; 24
 136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 13a:	78 94       	sei
 13c:	08 95       	ret

0000013e <USART_ReceiveByte>:
 13e:	e0 ec       	ldi	r30, 0xC0	; 192
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	ec f7       	brge	.-6      	; 0x142 <USART_ReceiveByte+0x4>
 148:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 14c:	08 95       	ret

0000014e <TWI_Init>:
 14e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 152:	ec eb       	ldi	r30, 0xBC	; 188
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	85 60       	ori	r24, 0x05	; 5
 15a:	80 83       	st	Z, r24
 15c:	78 94       	sei
 15e:	08 95       	ret

00000160 <stopCondition>:
 160:	ec eb       	ldi	r30, 0xBC	; 188
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 69       	ori	r24, 0x90	; 144
 168:	80 83       	st	Z, r24
 16a:	80 81       	ld	r24, Z
 16c:	8f 7d       	andi	r24, 0xDF	; 223
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret

00000172 <sendDataByte>:
 172:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 176:	ec eb       	ldi	r30, 0xBC	; 188
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 68       	ori	r24, 0x80	; 128
 17e:	80 83       	st	Z, r24
 180:	80 81       	ld	r24, Z
 182:	8f 7c       	andi	r24, 0xCF	; 207
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <sendPacket>:
		sendPacket(5, 0x70, 0x00, Data); // Sending the data of the seconds and minutes to the display chip, 0x70 = Display Address
		_delay_ms(5);
	}
}

void sendPacket(int data_length, uint8_t address_byte, uint8_t instruction_byte, uint8_t data[]) {
 188:	8f 92       	push	r8
 18a:	9f 92       	push	r9
 18c:	af 92       	push	r10
 18e:	bf 92       	push	r11
 190:	cf 92       	push	r12
 192:	df 92       	push	r13
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	7c 01       	movw	r14, r24
	
	int i = 0;
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
 1a2:	ec eb       	ldi	r30, 0xBC	; 188
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	90 81       	ld	r25, Z
 1a8:	90 6a       	ori	r25, 0xA0	; 160
 1aa:	90 83       	st	Z, r25
	
	while(!(i > data_length)) {
 1ac:	ff 20       	and	r15, r15
 1ae:	0c f4       	brge	.+2      	; 0x1b2 <sendPacket+0x2a>
 1b0:	4d c0       	rjmp	.+154    	; 0x24c <sendPacket+0xc4>
 1b2:	49 01       	movw	r8, r18
 1b4:	00 e0       	ldi	r16, 0x00	; 0
 1b6:	10 e0       	ldi	r17, 0x00	; 0
		
		while(!(TWCR & (1 << TWINT)));
 1b8:	cc eb       	ldi	r28, 0xBC	; 188
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
			break;
			case 0x10:
			sendDataByte(address_byte);
			break;
			case 0x18:
			sendDataByte(instruction_byte);
 1bc:	a4 2e       	mov	r10, r20
 1be:	b1 2c       	mov	r11, r1
		switch(status_byte) {
			case 0x08:
			sendDataByte(address_byte);
			break;
			case 0x10:
			sendDataByte(address_byte);
 1c0:	c6 2e       	mov	r12, r22
 1c2:	d1 2c       	mov	r13, r1
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
	
	while(!(i > data_length)) {
		
		while(!(TWCR & (1 << TWINT)));
 1c4:	88 81       	ld	r24, Y
 1c6:	88 23       	and	r24, r24
 1c8:	ec f7       	brge	.-6      	; 0x1c4 <sendPacket+0x3c>
		
		switch(status_byte) {
 1ca:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 1ce:	8e 2f       	mov	r24, r30
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	38 97       	sbiw	r30, 0x08	; 8
 1d6:	e1 33       	cpi	r30, 0x31	; 49
 1d8:	f1 05       	cpc	r31, r1
 1da:	70 f5       	brcc	.+92     	; 0x238 <sendPacket+0xb0>
 1dc:	ec 5c       	subi	r30, 0xCC	; 204
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__tablejump2__>
			case 0x08:
			sendDataByte(address_byte);
 1e4:	c6 01       	movw	r24, r12
 1e6:	0e 94 b9 00 	call	0x172	; 0x172 <sendDataByte>
			break;
 1ea:	26 c0       	rjmp	.+76     	; 0x238 <sendPacket+0xb0>
			case 0x10:
			sendDataByte(address_byte);
 1ec:	c6 01       	movw	r24, r12
 1ee:	0e 94 b9 00 	call	0x172	; 0x172 <sendDataByte>
			break;
 1f2:	22 c0       	rjmp	.+68     	; 0x238 <sendPacket+0xb0>
			case 0x18:
			sendDataByte(instruction_byte);
 1f4:	c5 01       	movw	r24, r10
 1f6:	0e 94 b9 00 	call	0x172	; 0x172 <sendDataByte>
			break;
 1fa:	1e c0       	rjmp	.+60     	; 0x238 <sendPacket+0xb0>
			case 0x20:
			stopCondition();
 1fc:	0e 94 b0 00 	call	0x160	; 0x160 <stopCondition>
			break;
 200:	1b c0       	rjmp	.+54     	; 0x238 <sendPacket+0xb0>
			case 0x28:
			if(i < data_length) {
 202:	0e 15       	cp	r16, r14
 204:	1f 05       	cpc	r17, r15
 206:	54 f4       	brge	.+20     	; 0x21c <sendPacket+0x94>
				sendDataByte(data[i]);
 208:	f4 01       	movw	r30, r8
 20a:	e0 0f       	add	r30, r16
 20c:	f1 1f       	adc	r31, r17
 20e:	80 81       	ld	r24, Z
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 b9 00 	call	0x172	; 0x172 <sendDataByte>
				i++;
 216:	0f 5f       	subi	r16, 0xFF	; 255
 218:	1f 4f       	sbci	r17, 0xFF	; 255
 21a:	0e c0       	rjmp	.+28     	; 0x238 <sendPacket+0xb0>
			}
			else {
				stopCondition();
 21c:	0e 94 b0 00 	call	0x160	; 0x160 <stopCondition>
				i++;
 220:	0f 5f       	subi	r16, 0xFF	; 255
 222:	1f 4f       	sbci	r17, 0xFF	; 255
 224:	09 c0       	rjmp	.+18     	; 0x238 <sendPacket+0xb0>
			}
			break;
			case 0x30:
			stopCondition();
 226:	0e 94 b0 00 	call	0x160	; 0x160 <stopCondition>
			break;
 22a:	06 c0       	rjmp	.+12     	; 0x238 <sendPacket+0xb0>
			case 0x38:
			TWCR |= (1 << TWINT) | (1 << TWSTA); // Wait until the Bus is free and then send a START
 22c:	88 81       	ld	r24, Y
 22e:	80 6a       	ori	r24, 0xA0	; 160
 230:	88 83       	st	Y, r24
			TWCR &= ~(1 << TWSTO);
 232:	88 81       	ld	r24, Y
 234:	8f 7e       	andi	r24, 0xEF	; 239
 236:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	87 e6       	ldi	r24, 0x67	; 103
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <sendPacket+0xb4>
 240:	00 c0       	rjmp	.+0      	; 0x242 <sendPacket+0xba>
 242:	00 00       	nop
	
	int i = 0;
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
	
	while(!(i > data_length)) {
 244:	e0 16       	cp	r14, r16
 246:	f1 06       	cpc	r15, r17
 248:	0c f0       	brlt	.+2      	; 0x24c <sendPacket+0xc4>
 24a:	bc cf       	rjmp	.-136    	; 0x1c4 <sendPacket+0x3c>
			default:
			break;
		}
		_delay_us(90);
	}
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	df 90       	pop	r13
 25a:	cf 90       	pop	r12
 25c:	bf 90       	pop	r11
 25e:	af 90       	pop	r10
 260:	9f 90       	pop	r9
 262:	8f 90       	pop	r8
 264:	08 95       	ret

00000266 <main>:
void recieveDataByte() {
	TWCR |= (1 << TWINT) | (1 << TWEA);
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
}

int main(void) {
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	2f 97       	sbiw	r28, 0x0f	; 15
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
	
	int i;
	uint8_t Data[5];
	uint8_t seg_codes[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
 27a:	8a e0       	ldi	r24, 0x0A	; 10
 27c:	e0 e0       	ldi	r30, 0x00	; 0
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	de 01       	movw	r26, r28
 282:	16 96       	adiw	r26, 0x06	; 6
 284:	01 90       	ld	r0, Z+
 286:	0d 92       	st	X+, r0
 288:	8a 95       	dec	r24
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x1e>
	
	USART_Init();
 28c:	0e 94 95 00 	call	0x12a	; 0x12a <USART_Init>
	
	TWI_Init(0b01001000); // Enabling all needed interrupts, the Two Wire Interface and setting the Bit-Rate Register
 290:	88 e4       	ldi	r24, 0x48	; 72
 292:	0e 94 a7 00 	call	0x14e	; 0x14e <TWI_Init>
 296:	7e 01       	movw	r14, r28
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	e8 0e       	add	r14, r24
 29c:	f1 1c       	adc	r15, r1
		
		for(i = 1; i < 5; i++) {
			Data[i] = seg_codes[USART_ReceiveByte()];
		}

		Data[0] = 0b01000111;
 29e:	0f 2e       	mov	r0, r31
 2a0:	f7 e4       	ldi	r31, 0x47	; 71
 2a2:	df 2e       	mov	r13, r31
 2a4:	f0 2d       	mov	r31, r0
 2a6:	8e 01       	movw	r16, r28
 2a8:	0e 5f       	subi	r16, 0xFE	; 254
 2aa:	1f 4f       	sbci	r17, 0xFF	; 255
	TWI_Init(0b01001000); // Enabling all needed interrupts, the Two Wire Interface and setting the Bit-Rate Register
	
	while(1) {
		
		for(i = 1; i < 5; i++) {
			Data[i] = seg_codes[USART_ReceiveByte()];
 2ac:	0e 94 9f 00 	call	0x13e	; 0x13e <USART_ReceiveByte>
 2b0:	f7 01       	movw	r30, r14
 2b2:	e8 0f       	add	r30, r24
 2b4:	f1 1d       	adc	r31, r1
 2b6:	80 81       	ld	r24, Z
 2b8:	f8 01       	movw	r30, r16
 2ba:	81 93       	st	Z+, r24
 2bc:	8f 01       	movw	r16, r30
	
	TWI_Init(0b01001000); // Enabling all needed interrupts, the Two Wire Interface and setting the Bit-Rate Register
	
	while(1) {
		
		for(i = 1; i < 5; i++) {
 2be:	ee 15       	cp	r30, r14
 2c0:	ff 05       	cpc	r31, r15
 2c2:	a1 f7       	brne	.-24     	; 0x2ac <main+0x46>
			Data[i] = seg_codes[USART_ReceiveByte()];
		}

		Data[0] = 0b01000111;
 2c4:	d9 82       	std	Y+1, r13	; 0x01
		sendPacket(5, 0x70, 0x00, Data); // Sending the data of the seconds and minutes to the display chip, 0x70 = Display Address
 2c6:	9e 01       	movw	r18, r28
 2c8:	2f 5f       	subi	r18, 0xFF	; 255
 2ca:	3f 4f       	sbci	r19, 0xFF	; 255
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	60 e7       	ldi	r22, 0x70	; 112
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 c4 00 	call	0x188	; 0x188 <sendPacket>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	8f e1       	ldi	r24, 0x1F	; 31
 2da:	9e e4       	ldi	r25, 0x4E	; 78
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <main+0x76>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x7c>
 2e2:	00 00       	nop
 2e4:	e0 cf       	rjmp	.-64     	; 0x2a6 <main+0x40>

000002e6 <__tablejump2__>:
 2e6:	ee 0f       	add	r30, r30
 2e8:	ff 1f       	adc	r31, r31
 2ea:	05 90       	lpm	r0, Z+
 2ec:	f4 91       	lpm	r31, Z
 2ee:	e0 2d       	mov	r30, r0
 2f0:	09 94       	ijmp

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
