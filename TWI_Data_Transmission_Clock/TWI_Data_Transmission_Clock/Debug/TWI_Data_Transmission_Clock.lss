
TWI_Data_Transmission_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000035c  000003f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800114  00800114  00000404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b9  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000726  00000000  00000000  00000d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c2  00000000  00000000  0000148b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021f  00000000  00000000  00001cee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001f0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 01 	call	0x338	; 0x338 <main>
  9e:	0c 94 ac 01 	jmp	0x358	; 0x358 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <sendDataByte>:
int i = 0, j = 0, arr[4] = {0};
int status_value, instructionByte = 0;
int seg_codes[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
	
void sendDataByte(int reg_value) {
	TWDR = reg_value;
  a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR |= (1 << TWINT);
  aa:	ec eb       	ldi	r30, 0xBC	; 188
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
  b4:	80 81       	ld	r24, Z
  b6:	8f 7c       	andi	r24, 0xCF	; 207
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <counter>:
}

int counter(int cnt) {
	switch(cnt) {
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	91 05       	cpc	r25, r1
  c0:	19 f1       	breq	.+70     	; 0x108 <counter+0x4c>
  c2:	1c f4       	brge	.+6      	; 0xca <counter+0xe>
  c4:	89 2b       	or	r24, r25
  c6:	41 f0       	breq	.+16     	; 0xd8 <counter+0x1c>
  c8:	67 c0       	rjmp	.+206    	; 0x198 <counter+0xdc>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	91 05       	cpc	r25, r1
  ce:	a1 f1       	breq	.+104    	; 0x138 <counter+0x7c>
  d0:	03 97       	sbiw	r24, 0x03	; 3
  d2:	09 f4       	brne	.+2      	; 0xd6 <counter+0x1a>
  d4:	49 c0       	rjmp	.+146    	; 0x168 <counter+0xac>
  d6:	60 c0       	rjmp	.+192    	; 0x198 <counter+0xdc>
		case 0:
			if(arr[cnt] > 9) {
  d8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <arr>
  dc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <arr+0x1>
  e0:	8a 30       	cpi	r24, 0x0A	; 10
  e2:	91 05       	cpc	r25, r1
  e4:	4c f0       	brlt	.+18     	; 0xf8 <counter+0x3c>
				arr[cnt] = 0;
				return arr[cnt]++;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <arr+0x1>
  ee:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <arr>
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret
			}
			else {
				return arr[cnt]++;
  f8:	9c 01       	movw	r18, r24
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	3f 4f       	sbci	r19, 0xFF	; 255
  fe:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <arr+0x1>
 102:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <arr>
 106:	08 95       	ret
			}
			break;
		case 1:
			if(arr[cnt] > 9) {
 108:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <arr+0x2>
 10c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <arr+0x3>
 110:	8a 30       	cpi	r24, 0x0A	; 10
 112:	91 05       	cpc	r25, r1
 114:	4c f0       	brlt	.+18     	; 0x128 <counter+0x6c>
				arr[cnt] = 0;
				return arr[cnt]++;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <arr+0x3>
 11e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <arr+0x2>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
			}
			else {
				return arr[cnt]++;
 128:	9c 01       	movw	r18, r24
 12a:	2f 5f       	subi	r18, 0xFF	; 255
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <arr+0x3>
 132:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <arr+0x2>
 136:	08 95       	ret
			}
			break;
		case 2:
			if(arr[cnt] > 9) {
 138:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <arr+0x4>
 13c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <arr+0x5>
 140:	8a 30       	cpi	r24, 0x0A	; 10
 142:	91 05       	cpc	r25, r1
 144:	4c f0       	brlt	.+18     	; 0x158 <counter+0x9c>
				arr[cnt] = 0;
				return arr[cnt]++;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <arr+0x5>
 14e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <arr+0x4>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
			}
			else {
				return arr[cnt]++;
 158:	9c 01       	movw	r18, r24
 15a:	2f 5f       	subi	r18, 0xFF	; 255
 15c:	3f 4f       	sbci	r19, 0xFF	; 255
 15e:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <arr+0x5>
 162:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <arr+0x4>
 166:	08 95       	ret
			}
			break;
		case 3:
			if(arr[cnt] > 9) {
 168:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <arr+0x6>
 16c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <arr+0x7>
 170:	8a 30       	cpi	r24, 0x0A	; 10
 172:	91 05       	cpc	r25, r1
 174:	4c f0       	brlt	.+18     	; 0x188 <counter+0xcc>
				arr[cnt] = 0;
				return arr[cnt]++;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <arr+0x7>
 17e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <arr+0x6>
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret
			}
			else {
				return arr[cnt]++;
 188:	9c 01       	movw	r18, r24
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	3f 4f       	sbci	r19, 0xFF	; 255
 18e:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <arr+0x7>
 192:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <arr+0x6>
 196:	08 95       	ret
			}
			break;
		default:
			return -1;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
 19c:	08 95       	ret

0000019e <__vector_24>:

ISR(TWI_vect) {
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	
	status_value = TWSR;
 1c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1c4:	88 7f       	andi	r24, 0xF8	; 248
	status_value &= 0b11111000;
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <status_value+0x1>
 1ce:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <status_value>
	
	switch(status_value) {
 1d2:	88 31       	cpi	r24, 0x18	; 24
 1d4:	b1 f0       	breq	.+44     	; 0x202 <__vector_24+0x64>
 1d6:	28 f4       	brcc	.+10     	; 0x1e2 <__vector_24+0x44>
 1d8:	88 30       	cpi	r24, 0x08	; 8
 1da:	49 f0       	breq	.+18     	; 0x1ee <__vector_24+0x50>
 1dc:	80 31       	cpi	r24, 0x10	; 16
 1de:	61 f0       	breq	.+24     	; 0x1f8 <__vector_24+0x5a>
 1e0:	9a c0       	rjmp	.+308    	; 0x316 <__vector_24+0x178>
 1e2:	88 32       	cpi	r24, 0x28	; 40
 1e4:	79 f1       	breq	.+94     	; 0x244 <__vector_24+0xa6>
 1e6:	88 33       	cpi	r24, 0x38	; 56
 1e8:	09 f4       	brne	.+2      	; 0x1ec <__vector_24+0x4e>
 1ea:	89 c0       	rjmp	.+274    	; 0x2fe <__vector_24+0x160>
 1ec:	94 c0       	rjmp	.+296    	; 0x316 <__vector_24+0x178>
		case 0x08:
			sendDataByte(0x70);
 1ee:	80 e7       	ldi	r24, 0x70	; 112
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <sendDataByte>
			break;
 1f6:	8f c0       	rjmp	.+286    	; 0x316 <__vector_24+0x178>
		case 0x10:
			sendDataByte(0x70);
 1f8:	80 e7       	ldi	r24, 0x70	; 112
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 53 00 	call	0xa6	; 0xa6 <sendDataByte>
			break;
 200:	8a c0       	rjmp	.+276    	; 0x316 <__vector_24+0x178>
		case 0x18:
			if(instructionByte == 0) {
 202:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 206:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	59 f4       	brne	.+22     	; 0x224 <__vector_24+0x86>
				sendDataByte(instructionByte);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 53 00 	call	0xa6	; 0xa6 <sendDataByte>
				instructionByte = 4;
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 21e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 222:	79 c0       	rjmp	.+242    	; 0x316 <__vector_24+0x178>
			}
			else if(instructionByte > 0) {
 224:	18 16       	cp	r1, r24
 226:	19 06       	cpc	r1, r25
 228:	0c f0       	brlt	.+2      	; 0x22c <__vector_24+0x8e>
 22a:	75 c0       	rjmp	.+234    	; 0x316 <__vector_24+0x178>
				sendDataByte(instructionByte);
 22c:	0e 94 53 00 	call	0xa6	; 0xa6 <sendDataByte>
				instructionByte--;
 230:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 234:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 23e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 242:	69 c0       	rjmp	.+210    	; 0x316 <__vector_24+0x178>
				instructionByte = 0;
			else
				instructionByte++;
			break; */
		case 0x28:
			switch(i) {
 244:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <i>
 248:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <i+0x1>
 24c:	00 97       	sbiw	r24, 0x00	; 0
 24e:	19 f0       	breq	.+6      	; 0x256 <__vector_24+0xb8>
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	e9 f0       	breq	.+58     	; 0x28e <__vector_24+0xf0>
 254:	60 c0       	rjmp	.+192    	; 0x316 <__vector_24+0x178>
				case 0:
					sendDataByte(0b01000111);
 256:	87 e4       	ldi	r24, 0x47	; 71
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 53 00 	call	0xa6	; 0xa6 <sendDataByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	87 e8       	ldi	r24, 0x87	; 135
 262:	93 e1       	ldi	r25, 0x13	; 19
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <__vector_24+0xc6>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <__vector_24+0xd0>
 26e:	00 00       	nop
					_delay_ms(400);
					TWCR |= (1 << TWINT) | (1 << TWSTA);
 270:	ec eb       	ldi	r30, 0xBC	; 188
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	80 6a       	ori	r24, 0xA0	; 160
 278:	80 83       	st	Z, r24
					TWCR &= ~(1 << TWSTO);
 27a:	80 81       	ld	r24, Z
 27c:	8f 7e       	andi	r24, 0xEF	; 239
 27e:	80 83       	st	Z, r24
					i = 1;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <i+0x1>
 288:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <i>
					break;
 28c:	44 c0       	rjmp	.+136    	; 0x316 <__vector_24+0x178>
				case 1:
					if(j < 4) {
 28e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <j>
 292:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <j+0x1>
 296:	84 30       	cpi	r24, 0x04	; 4
 298:	91 05       	cpc	r25, r1
 29a:	34 f5       	brge	.+76     	; 0x2e8 <__vector_24+0x14a>
						sendDataByte(seg_codes[counter(j)]);
 29c:	0e 94 5e 00 	call	0xbc	; 0xbc <counter>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	fc 01       	movw	r30, r24
 2a6:	e0 50       	subi	r30, 0x00	; 0
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	80 81       	ld	r24, Z
 2ac:	91 81       	ldd	r25, Z+1	; 0x01
 2ae:	0e 94 53 00 	call	0xa6	; 0xa6 <sendDataByte>
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	87 e8       	ldi	r24, 0x87	; 135
 2b6:	93 e1       	ldi	r25, 0x13	; 19
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <__vector_24+0x11a>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <__vector_24+0x124>
 2c2:	00 00       	nop
						_delay_ms(400);
						TWCR |= (1 << TWINT) | (1 << TWSTA);
 2c4:	ec eb       	ldi	r30, 0xBC	; 188
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	80 6a       	ori	r24, 0xA0	; 160
 2cc:	80 83       	st	Z, r24
						TWCR &= ~(1 << TWSTO);
 2ce:	80 81       	ld	r24, Z
 2d0:	8f 7e       	andi	r24, 0xEF	; 239
 2d2:	80 83       	st	Z, r24
						j++;
 2d4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <j>
 2d8:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <j+0x1>
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <j+0x1>
 2e2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <j>
 2e6:	17 c0       	rjmp	.+46     	; 0x316 <__vector_24+0x178>
					}
					else if(j == 4) {
 2e8:	04 97       	sbiw	r24, 0x04	; 4
 2ea:	a9 f4       	brne	.+42     	; 0x316 <__vector_24+0x178>
						i = 0;
 2ec:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <i+0x1>
 2f0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <i>
						j = 0;
 2f4:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <j+0x1>
 2f8:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <j>
 2fc:	0c c0       	rjmp	.+24     	; 0x316 <__vector_24+0x178>
				TWCR |= (1 << TWINT) | (1 << TWSTA);
				TWCR &= ~(1 << TWSTO);
			}
			break; */
		case 0x38:
			i = 0;
 2fe:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <i+0x1>
 302:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <i>
			TWCR |= (1 << TWINT) | (1 << TWSTA);
 306:	ec eb       	ldi	r30, 0xBC	; 188
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	80 6a       	ori	r24, 0xA0	; 160
 30e:	80 83       	st	Z, r24
			TWCR &= ~(1 << TWSTO);
 310:	80 81       	ld	r24, Z
 312:	8f 7e       	andi	r24, 0xEF	; 239
 314:	80 83       	st	Z, r24
			break;
		default:
			return;
	}
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <main>:

int main(void) {
	
	TWBR = 0b01001000;
 338:	88 e4       	ldi	r24, 0x48	; 72
 33a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR = 0b11111000;
 33e:	88 ef       	ldi	r24, 0xF8	; 248
 340:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWCR |= (1 << TWIE);
 344:	ec eb       	ldi	r30, 0xBC	; 188
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	80 83       	st	Z, r24
	sei();
 34e:	78 94       	sei
	
	TWCR |= (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 350:	80 81       	ld	r24, Z
 352:	84 6a       	ori	r24, 0xA4	; 164
 354:	80 83       	st	Z, r24
 356:	ff cf       	rjmp	.-2      	; 0x356 <main+0x1e>

00000358 <_exit>:
 358:	f8 94       	cli

0000035a <__stop_program>:
 35a:	ff cf       	rjmp	.-2      	; 0x35a <__stop_program>
