
ADC_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000007f8  0000088c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  00000896  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b4  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000779  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000419  00000000  00000000  00001a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045a  00000000  00000000  00001f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b6  00000000  00000000  000023ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_21>
  58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_24>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  68:	f6 00       	.word	0x00f6	; ????
  6a:	20 01       	movw	r4, r0
  6c:	20 01       	movw	r4, r0
  6e:	20 01       	movw	r4, r0
  70:	20 01       	movw	r4, r0
  72:	20 01       	movw	r4, r0
  74:	20 01       	movw	r4, r0
  76:	20 01       	movw	r4, r0
  78:	fa 00       	.word	0x00fa	; ????
  7a:	20 01       	movw	r4, r0
  7c:	20 01       	movw	r4, r0
  7e:	20 01       	movw	r4, r0
  80:	20 01       	movw	r4, r0
  82:	20 01       	movw	r4, r0
  84:	20 01       	movw	r4, r0
  86:	20 01       	movw	r4, r0
  88:	fe 00       	.word	0x00fe	; ????
  8a:	20 01       	movw	r4, r0
  8c:	20 01       	movw	r4, r0
  8e:	20 01       	movw	r4, r0
  90:	20 01       	movw	r4, r0
  92:	20 01       	movw	r4, r0
  94:	20 01       	movw	r4, r0
  96:	20 01       	movw	r4, r0
  98:	02 01       	movw	r0, r4
  9a:	20 01       	movw	r4, r0
  9c:	20 01       	movw	r4, r0
  9e:	20 01       	movw	r4, r0
  a0:	20 01       	movw	r4, r0
  a2:	20 01       	movw	r4, r0
  a4:	20 01       	movw	r4, r0
  a6:	20 01       	movw	r4, r0
  a8:	05 01       	movw	r0, r10
  aa:	20 01       	movw	r4, r0
  ac:	20 01       	movw	r4, r0
  ae:	20 01       	movw	r4, r0
  b0:	20 01       	movw	r4, r0
  b2:	20 01       	movw	r4, r0
  b4:	20 01       	movw	r4, r0
  b6:	20 01       	movw	r4, r0
  b8:	17 01       	movw	r2, r14
  ba:	20 01       	movw	r4, r0
  bc:	20 01       	movw	r4, r0
  be:	20 01       	movw	r4, r0
  c0:	20 01       	movw	r4, r0
  c2:	20 01       	movw	r4, r0
  c4:	20 01       	movw	r4, r0
  c6:	20 01       	movw	r4, r0
  c8:	1a 01       	movw	r2, r20

000000ca <__ctors_end>:
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf ef       	ldi	r28, 0xFF	; 255
  d0:	d8 e0       	ldi	r29, 0x08	; 8
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
  d6:	11 e0       	ldi	r17, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	e8 ef       	ldi	r30, 0xF8	; 248
  de:	f7 e0       	ldi	r31, 0x07	; 7
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
  e2:	05 90       	lpm	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	aa 30       	cpi	r26, 0x0A	; 10
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	aa e0       	ldi	r26, 0x0A	; 10
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	ad 30       	cpi	r26, 0x0D	; 13
  f8:	b2 07       	cpc	r27, r18
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
  fc:	0e 94 37 01 	call	0x26e	; 0x26e <main>
 100:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <_exit>

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <__vector_21>:
#include <util/delay.h>

int messung;
uint8_t status_byte;

ISR(ADC_vect) {
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	messung = ADC;
 116:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 11a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 11e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <messung+0x1>
 122:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <messung>
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_24>:

ISR(TWI_vect) {
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
	status_byte = TWSR;
 140:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	status_byte &= 0b11111000;
 144:	88 7f       	andi	r24, 0xF8	; 248
 146:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <initTWI>:

void sendPacket(int data_length, uint8_t address_byte, uint8_t instruction_byte, uint8_t data[]);

void initTWI(uint8_t bitRate_byte) {
	TWBR = bitRate_byte;
 156:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR |= (1 << TWIE) | (1 << TWEN);
 15a:	ec eb       	ldi	r30, 0xBC	; 188
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	85 60       	ori	r24, 0x05	; 5
 162:	80 83       	st	Z, r24
	sei();
 164:	78 94       	sei
 166:	08 95       	ret

00000168 <stopCondition>:
}

void stopCondition() {
	TWCR |= (1 << TWINT) | (1 << TWSTO);
 168:	ec eb       	ldi	r30, 0xBC	; 188
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 69       	ori	r24, 0x90	; 144
 170:	80 83       	st	Z, r24
	TWCR &= ~(1 << TWSTA);
 172:	80 81       	ld	r24, Z
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	80 83       	st	Z, r24
 178:	08 95       	ret

0000017a <sendDataByte>:
}

void sendDataByte(int reg_value) {
	TWDR = reg_value;
 17a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR |= (1 << TWINT);
 17e:	ec eb       	ldi	r30, 0xBC	; 188
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 68       	ori	r24, 0x80	; 128
 186:	80 83       	st	Z, r24
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
 188:	80 81       	ld	r24, Z
 18a:	8f 7c       	andi	r24, 0xCF	; 207
 18c:	80 83       	st	Z, r24
 18e:	08 95       	ret

00000190 <sendPacket>:
		}
		sendPacket(5, 0x70, 0x00, data); // Sending the data of the seconds and minutes to the display chip, 0x70 = Display Address
	}
}

void sendPacket(int data_length, uint8_t address_byte, uint8_t instruction_byte, uint8_t data[]) {
 190:	8f 92       	push	r8
 192:	9f 92       	push	r9
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	7c 01       	movw	r14, r24
	
	int i = 0;
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
 1aa:	ec eb       	ldi	r30, 0xBC	; 188
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	90 81       	ld	r25, Z
 1b0:	90 6a       	ori	r25, 0xA0	; 160
 1b2:	90 83       	st	Z, r25
	
	while(!(i > data_length)) {
 1b4:	ff 20       	and	r15, r15
 1b6:	0c f4       	brge	.+2      	; 0x1ba <sendPacket+0x2a>
 1b8:	4d c0       	rjmp	.+154    	; 0x254 <sendPacket+0xc4>
 1ba:	49 01       	movw	r8, r18
 1bc:	00 e0       	ldi	r16, 0x00	; 0
 1be:	10 e0       	ldi	r17, 0x00	; 0
		
		while(!(TWCR & (1 << TWINT)));
 1c0:	cc eb       	ldi	r28, 0xBC	; 188
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
			break;
			case 0x10:
			sendDataByte(address_byte);
			break;
			case 0x18:
			sendDataByte(instruction_byte);
 1c4:	a4 2e       	mov	r10, r20
 1c6:	b1 2c       	mov	r11, r1
		switch(status_byte) {
			case 0x08:
			sendDataByte(address_byte);
			break;
			case 0x10:
			sendDataByte(address_byte);
 1c8:	c6 2e       	mov	r12, r22
 1ca:	d1 2c       	mov	r13, r1
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
	
	while(!(i > data_length)) {
		
		while(!(TWCR & (1 << TWINT)));
 1cc:	88 81       	ld	r24, Y
 1ce:	88 23       	and	r24, r24
 1d0:	ec f7       	brge	.-6      	; 0x1cc <sendPacket+0x3c>
		
		switch(status_byte) {
 1d2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 1d6:	8e 2f       	mov	r24, r30
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	38 97       	sbiw	r30, 0x08	; 8
 1de:	e1 33       	cpi	r30, 0x31	; 49
 1e0:	f1 05       	cpc	r31, r1
 1e2:	70 f5       	brcc	.+92     	; 0x240 <sendPacket+0xb0>
 1e4:	ec 5c       	subi	r30, 0xCC	; 204
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__tablejump2__>
			case 0x08:
			sendDataByte(address_byte);
 1ec:	c6 01       	movw	r24, r12
 1ee:	0e 94 bd 00 	call	0x17a	; 0x17a <sendDataByte>
			break;
 1f2:	26 c0       	rjmp	.+76     	; 0x240 <sendPacket+0xb0>
			case 0x10:
			sendDataByte(address_byte);
 1f4:	c6 01       	movw	r24, r12
 1f6:	0e 94 bd 00 	call	0x17a	; 0x17a <sendDataByte>
			break;
 1fa:	22 c0       	rjmp	.+68     	; 0x240 <sendPacket+0xb0>
			case 0x18:
			sendDataByte(instruction_byte);
 1fc:	c5 01       	movw	r24, r10
 1fe:	0e 94 bd 00 	call	0x17a	; 0x17a <sendDataByte>
			break;
 202:	1e c0       	rjmp	.+60     	; 0x240 <sendPacket+0xb0>
			case 0x20:
			stopCondition();
 204:	0e 94 b4 00 	call	0x168	; 0x168 <stopCondition>
			break;
 208:	1b c0       	rjmp	.+54     	; 0x240 <sendPacket+0xb0>
			case 0x28:
			if(i < data_length) {
 20a:	0e 15       	cp	r16, r14
 20c:	1f 05       	cpc	r17, r15
 20e:	54 f4       	brge	.+20     	; 0x224 <sendPacket+0x94>
				sendDataByte(data[i]);
 210:	f4 01       	movw	r30, r8
 212:	e0 0f       	add	r30, r16
 214:	f1 1f       	adc	r31, r17
 216:	80 81       	ld	r24, Z
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 bd 00 	call	0x17a	; 0x17a <sendDataByte>
				i++;
 21e:	0f 5f       	subi	r16, 0xFF	; 255
 220:	1f 4f       	sbci	r17, 0xFF	; 255
 222:	0e c0       	rjmp	.+28     	; 0x240 <sendPacket+0xb0>
			}
			else {
				stopCondition();
 224:	0e 94 b4 00 	call	0x168	; 0x168 <stopCondition>
				i++;
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	09 c0       	rjmp	.+18     	; 0x240 <sendPacket+0xb0>
			}
			break;
			case 0x30:
			stopCondition();
 22e:	0e 94 b4 00 	call	0x168	; 0x168 <stopCondition>
			break;
 232:	06 c0       	rjmp	.+12     	; 0x240 <sendPacket+0xb0>
			case 0x38:
			TWCR |= (1 << TWINT) | (1 << TWSTA); // Wait until the Bus is free and then send a START
 234:	88 81       	ld	r24, Y
 236:	80 6a       	ori	r24, 0xA0	; 160
 238:	88 83       	st	Y, r24
			TWCR &= ~(1 << TWSTO);
 23a:	88 81       	ld	r24, Y
 23c:	8f 7e       	andi	r24, 0xEF	; 239
 23e:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	87 e6       	ldi	r24, 0x67	; 103
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <sendPacket+0xb4>
 248:	00 c0       	rjmp	.+0      	; 0x24a <sendPacket+0xba>
 24a:	00 00       	nop
	
	int i = 0;
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
	
	while(!(i > data_length)) {
 24c:	e0 16       	cp	r14, r16
 24e:	f1 06       	cpc	r15, r17
 250:	0c f0       	brlt	.+2      	; 0x254 <sendPacket+0xc4>
 252:	bc cf       	rjmp	.-136    	; 0x1cc <sendPacket+0x3c>
			default:
			break;
		}
		_delay_us(90);
	}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
 264:	bf 90       	pop	r11
 266:	af 90       	pop	r10
 268:	9f 90       	pop	r9
 26a:	8f 90       	pop	r8
 26c:	08 95       	ret

0000026e <main>:
	TWDR = reg_value;
	TWCR |= (1 << TWINT);
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
}

int main(void) {
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	2f 97       	sbiw	r28, 0x0f	; 15
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61

	int i, temp;
	uint8_t data[5];
	uint8_t seg_codes[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	e0 e0       	ldi	r30, 0x00	; 0
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	de 01       	movw	r26, r28
 28a:	16 96       	adiw	r26, 0x06	; 6
 28c:	01 90       	ld	r0, Z+
 28e:	0d 92       	st	X+, r0
 290:	8a 95       	dec	r24
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x1e>

	DDRD |= (1 << PIND4);
 294:	54 9a       	sbi	0x0a, 4	; 10
	
	ADMUX |= (1 << REFS1) | (1 << REFS0) | (1 << MUX3); // Set the internal reference and mux
 296:	ec e7       	ldi	r30, 0x7C	; 124
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	88 6c       	ori	r24, 0xC8	; 200
 29e:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADEN) | (1 << ADIE); 													// "ADC Enable" schaltet den ADC ein
 2a0:	ea e7       	ldi	r30, 0x7A	; 122
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	88 68       	ori	r24, 0x88	; 136
 2a8:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);						// Prescaler wird auf 128 eingestellt und man erhält bei 16MHz eine Frequenz von 125kHz
 2aa:	80 81       	ld	r24, Z
 2ac:	87 60       	ori	r24, 0x07	; 7
 2ae:	80 83       	st	Z, r24

	initTWI(0b01001000); // Enabling all needed interrupts, the Two Wire Interface and setting the Bit-Rate Register
 2b0:	88 e4       	ldi	r24, 0x48	; 72
 2b2:	0e 94 ab 00 	call	0x156	; 0x156 <initTWI>

	sei();
 2b6:	78 94       	sei
	
	while(1) {
		
		ADCSRA |= (1 << ADSC);
 2b8:	0f 2e       	mov	r0, r31
 2ba:	fa e7       	ldi	r31, 0x7A	; 122
 2bc:	ef 2e       	mov	r14, r31
 2be:	f1 2c       	mov	r15, r1
 2c0:	f0 2d       	mov	r31, r0
		
		_delay_ms(200);
		
		data[0] = 0b01000111;
 2c2:	0f 2e       	mov	r0, r31
 2c4:	f7 e4       	ldi	r31, 0x47	; 71
 2c6:	df 2e       	mov	r13, r31
 2c8:	f0 2d       	mov	r31, r0

		temp = (int)((messung - 324.31) * 100)/ 1.22;
		for(i = 4; temp != 0; i--) {
			
			data[i] = seg_codes[temp % 10];
 2ca:	0a e0       	ldi	r16, 0x0A	; 10
 2cc:	10 e0       	ldi	r17, 0x00	; 0

	sei();
	
	while(1) {
		
		ADCSRA |= (1 << ADSC);
 2ce:	f7 01       	movw	r30, r14
 2d0:	80 81       	ld	r24, Z
 2d2:	80 64       	ori	r24, 0x40	; 64
 2d4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d6:	ff ef       	ldi	r31, 0xFF	; 255
 2d8:	23 ec       	ldi	r18, 0xC3	; 195
 2da:	89 e0       	ldi	r24, 0x09	; 9
 2dc:	f1 50       	subi	r31, 0x01	; 1
 2de:	20 40       	sbci	r18, 0x00	; 0
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x6e>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x78>
 2e6:	00 00       	nop
		
		_delay_ms(200);
		
		data[0] = 0b01000111;
 2e8:	d9 82       	std	Y+1, r13	; 0x01

		temp = (int)((messung - 324.31) * 100)/ 1.22;
 2ea:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <messung>
 2ee:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <messung+0x1>
 2f2:	07 2e       	mov	r0, r23
 2f4:	00 0c       	add	r0, r0
 2f6:	88 0b       	sbc	r24, r24
 2f8:	99 0b       	sbc	r25, r25
 2fa:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__floatsisf>
 2fe:	2e ea       	ldi	r18, 0xAE	; 174
 300:	37 e2       	ldi	r19, 0x27	; 39
 302:	42 ea       	ldi	r20, 0xA2	; 162
 304:	53 e4       	ldi	r21, 0x43	; 67
 306:	0e 94 bc 01 	call	0x378	; 0x378 <__subsf3>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	48 ec       	ldi	r20, 0xC8	; 200
 310:	52 e4       	ldi	r21, 0x42	; 66
 312:	0e 94 5f 03 	call	0x6be	; 0x6be <__mulsf3>
 316:	0e 94 9b 02 	call	0x536	; 0x536 <__fixsfsi>
 31a:	07 2e       	mov	r0, r23
 31c:	00 0c       	add	r0, r0
 31e:	88 0b       	sbc	r24, r24
 320:	99 0b       	sbc	r25, r25
 322:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__floatsisf>
 326:	26 ef       	ldi	r18, 0xF6	; 246
 328:	38 e2       	ldi	r19, 0x28	; 40
 32a:	4c e9       	ldi	r20, 0x9C	; 156
 32c:	5f e3       	ldi	r21, 0x3F	; 63
 32e:	0e 94 29 02 	call	0x452	; 0x452 <__divsf3>
 332:	0e 94 9b 02 	call	0x536	; 0x536 <__fixsfsi>
 336:	cb 01       	movw	r24, r22
		for(i = 4; temp != 0; i--) {
 338:	00 97       	sbiw	r24, 0x00	; 0
 33a:	a1 f0       	breq	.+40     	; 0x364 <main+0xf6>
 33c:	9e 01       	movw	r18, r28
 33e:	2a 5f       	subi	r18, 0xFA	; 250
 340:	3f 4f       	sbci	r19, 0xFF	; 255
			
			data[i] = seg_codes[temp % 10];
 342:	b8 01       	movw	r22, r16
 344:	0e 94 cc 03 	call	0x798	; 0x798 <__divmodhi4>
 348:	e6 e0       	ldi	r30, 0x06	; 6
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	ec 0f       	add	r30, r28
 34e:	fd 1f       	adc	r31, r29
 350:	e8 0f       	add	r30, r24
 352:	f9 1f       	adc	r31, r25
 354:	80 81       	ld	r24, Z
 356:	f9 01       	movw	r30, r18
 358:	82 93       	st	-Z, r24
 35a:	9f 01       	movw	r18, r30
			temp = temp / 10;
 35c:	86 2f       	mov	r24, r22
 35e:	97 2f       	mov	r25, r23
		_delay_ms(200);
		
		data[0] = 0b01000111;

		temp = (int)((messung - 324.31) * 100)/ 1.22;
		for(i = 4; temp != 0; i--) {
 360:	00 97       	sbiw	r24, 0x00	; 0
 362:	79 f7       	brne	.-34     	; 0x342 <main+0xd4>
			
			data[i] = seg_codes[temp % 10];
			temp = temp / 10;
		}
		sendPacket(5, 0x70, 0x00, data); // Sending the data of the seconds and minutes to the display chip, 0x70 = Display Address
 364:	9e 01       	movw	r18, r28
 366:	2f 5f       	subi	r18, 0xFF	; 255
 368:	3f 4f       	sbci	r19, 0xFF	; 255
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	60 e7       	ldi	r22, 0x70	; 112
 36e:	85 e0       	ldi	r24, 0x05	; 5
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 c8 00 	call	0x190	; 0x190 <sendPacket>
	}
 376:	ab cf       	rjmp	.-170    	; 0x2ce <main+0x60>

00000378 <__subsf3>:
 378:	50 58       	subi	r21, 0x80	; 128

0000037a <__addsf3>:
 37a:	bb 27       	eor	r27, r27
 37c:	aa 27       	eor	r26, r26
 37e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__addsf3x>
 382:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_round>
 386:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_pscA>
 38a:	38 f0       	brcs	.+14     	; 0x39a <__addsf3+0x20>
 38c:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_pscB>
 390:	20 f0       	brcs	.+8      	; 0x39a <__addsf3+0x20>
 392:	39 f4       	brne	.+14     	; 0x3a2 <__addsf3+0x28>
 394:	9f 3f       	cpi	r25, 0xFF	; 255
 396:	19 f4       	brne	.+6      	; 0x39e <__addsf3+0x24>
 398:	26 f4       	brtc	.+8      	; 0x3a2 <__addsf3+0x28>
 39a:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_nan>
 39e:	0e f4       	brtc	.+2      	; 0x3a2 <__addsf3+0x28>
 3a0:	e0 95       	com	r30
 3a2:	e7 fb       	bst	r30, 7
 3a4:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_inf>

000003a8 <__addsf3x>:
 3a8:	e9 2f       	mov	r30, r25
 3aa:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_split3>
 3ae:	58 f3       	brcs	.-42     	; 0x386 <__addsf3+0xc>
 3b0:	ba 17       	cp	r27, r26
 3b2:	62 07       	cpc	r22, r18
 3b4:	73 07       	cpc	r23, r19
 3b6:	84 07       	cpc	r24, r20
 3b8:	95 07       	cpc	r25, r21
 3ba:	20 f0       	brcs	.+8      	; 0x3c4 <__addsf3x+0x1c>
 3bc:	79 f4       	brne	.+30     	; 0x3dc <__addsf3x+0x34>
 3be:	a6 f5       	brtc	.+104    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3c0:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_zero>
 3c4:	0e f4       	brtc	.+2      	; 0x3c8 <__addsf3x+0x20>
 3c6:	e0 95       	com	r30
 3c8:	0b 2e       	mov	r0, r27
 3ca:	ba 2f       	mov	r27, r26
 3cc:	a0 2d       	mov	r26, r0
 3ce:	0b 01       	movw	r0, r22
 3d0:	b9 01       	movw	r22, r18
 3d2:	90 01       	movw	r18, r0
 3d4:	0c 01       	movw	r0, r24
 3d6:	ca 01       	movw	r24, r20
 3d8:	a0 01       	movw	r20, r0
 3da:	11 24       	eor	r1, r1
 3dc:	ff 27       	eor	r31, r31
 3de:	59 1b       	sub	r21, r25
 3e0:	99 f0       	breq	.+38     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e2:	59 3f       	cpi	r21, 0xF9	; 249
 3e4:	50 f4       	brcc	.+20     	; 0x3fa <__addsf3x+0x52>
 3e6:	50 3e       	cpi	r21, 0xE0	; 224
 3e8:	68 f1       	brcs	.+90     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3ea:	1a 16       	cp	r1, r26
 3ec:	f0 40       	sbci	r31, 0x00	; 0
 3ee:	a2 2f       	mov	r26, r18
 3f0:	23 2f       	mov	r18, r19
 3f2:	34 2f       	mov	r19, r20
 3f4:	44 27       	eor	r20, r20
 3f6:	58 5f       	subi	r21, 0xF8	; 248
 3f8:	f3 cf       	rjmp	.-26     	; 0x3e0 <__addsf3x+0x38>
 3fa:	46 95       	lsr	r20
 3fc:	37 95       	ror	r19
 3fe:	27 95       	ror	r18
 400:	a7 95       	ror	r26
 402:	f0 40       	sbci	r31, 0x00	; 0
 404:	53 95       	inc	r21
 406:	c9 f7       	brne	.-14     	; 0x3fa <__addsf3x+0x52>
 408:	7e f4       	brtc	.+30     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 40a:	1f 16       	cp	r1, r31
 40c:	ba 0b       	sbc	r27, r26
 40e:	62 0b       	sbc	r22, r18
 410:	73 0b       	sbc	r23, r19
 412:	84 0b       	sbc	r24, r20
 414:	ba f0       	brmi	.+46     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 416:	91 50       	subi	r25, 0x01	; 1
 418:	a1 f0       	breq	.+40     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 41a:	ff 0f       	add	r31, r31
 41c:	bb 1f       	adc	r27, r27
 41e:	66 1f       	adc	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	88 1f       	adc	r24, r24
 424:	c2 f7       	brpl	.-16     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 426:	0e c0       	rjmp	.+28     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 428:	ba 0f       	add	r27, r26
 42a:	62 1f       	adc	r22, r18
 42c:	73 1f       	adc	r23, r19
 42e:	84 1f       	adc	r24, r20
 430:	48 f4       	brcc	.+18     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 432:	87 95       	ror	r24
 434:	77 95       	ror	r23
 436:	67 95       	ror	r22
 438:	b7 95       	ror	r27
 43a:	f7 95       	ror	r31
 43c:	9e 3f       	cpi	r25, 0xFE	; 254
 43e:	08 f0       	brcs	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	b0 cf       	rjmp	.-160    	; 0x3a2 <__addsf3+0x28>
 442:	93 95       	inc	r25
 444:	88 0f       	add	r24, r24
 446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 448:	99 27       	eor	r25, r25
 44a:	ee 0f       	add	r30, r30
 44c:	97 95       	ror	r25
 44e:	87 95       	ror	r24
 450:	08 95       	ret

00000452 <__divsf3>:
 452:	0e 94 3d 02 	call	0x47a	; 0x47a <__divsf3x>
 456:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_round>
 45a:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_pscB>
 45e:	58 f0       	brcs	.+22     	; 0x476 <__divsf3+0x24>
 460:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_pscA>
 464:	40 f0       	brcs	.+16     	; 0x476 <__divsf3+0x24>
 466:	29 f4       	brne	.+10     	; 0x472 <__divsf3+0x20>
 468:	5f 3f       	cpi	r21, 0xFF	; 255
 46a:	29 f0       	breq	.+10     	; 0x476 <__divsf3+0x24>
 46c:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_inf>
 470:	51 11       	cpse	r21, r1
 472:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_szero>
 476:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_nan>

0000047a <__divsf3x>:
 47a:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_split3>
 47e:	68 f3       	brcs	.-38     	; 0x45a <__divsf3+0x8>

00000480 <__divsf3_pse>:
 480:	99 23       	and	r25, r25
 482:	b1 f3       	breq	.-20     	; 0x470 <__divsf3+0x1e>
 484:	55 23       	and	r21, r21
 486:	91 f3       	breq	.-28     	; 0x46c <__divsf3+0x1a>
 488:	95 1b       	sub	r25, r21
 48a:	55 0b       	sbc	r21, r21
 48c:	bb 27       	eor	r27, r27
 48e:	aa 27       	eor	r26, r26
 490:	62 17       	cp	r22, r18
 492:	73 07       	cpc	r23, r19
 494:	84 07       	cpc	r24, r20
 496:	38 f0       	brcs	.+14     	; 0x4a6 <__divsf3_pse+0x26>
 498:	9f 5f       	subi	r25, 0xFF	; 255
 49a:	5f 4f       	sbci	r21, 0xFF	; 255
 49c:	22 0f       	add	r18, r18
 49e:	33 1f       	adc	r19, r19
 4a0:	44 1f       	adc	r20, r20
 4a2:	aa 1f       	adc	r26, r26
 4a4:	a9 f3       	breq	.-22     	; 0x490 <__divsf3_pse+0x10>
 4a6:	35 d0       	rcall	.+106    	; 0x512 <__divsf3_pse+0x92>
 4a8:	0e 2e       	mov	r0, r30
 4aa:	3a f0       	brmi	.+14     	; 0x4ba <__divsf3_pse+0x3a>
 4ac:	e0 e8       	ldi	r30, 0x80	; 128
 4ae:	32 d0       	rcall	.+100    	; 0x514 <__divsf3_pse+0x94>
 4b0:	91 50       	subi	r25, 0x01	; 1
 4b2:	50 40       	sbci	r21, 0x00	; 0
 4b4:	e6 95       	lsr	r30
 4b6:	00 1c       	adc	r0, r0
 4b8:	ca f7       	brpl	.-14     	; 0x4ac <__divsf3_pse+0x2c>
 4ba:	2b d0       	rcall	.+86     	; 0x512 <__divsf3_pse+0x92>
 4bc:	fe 2f       	mov	r31, r30
 4be:	29 d0       	rcall	.+82     	; 0x512 <__divsf3_pse+0x92>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	88 1f       	adc	r24, r24
 4c6:	bb 1f       	adc	r27, r27
 4c8:	26 17       	cp	r18, r22
 4ca:	37 07       	cpc	r19, r23
 4cc:	48 07       	cpc	r20, r24
 4ce:	ab 07       	cpc	r26, r27
 4d0:	b0 e8       	ldi	r27, 0x80	; 128
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <__divsf3_pse+0x56>
 4d4:	bb 0b       	sbc	r27, r27
 4d6:	80 2d       	mov	r24, r0
 4d8:	bf 01       	movw	r22, r30
 4da:	ff 27       	eor	r31, r31
 4dc:	93 58       	subi	r25, 0x83	; 131
 4de:	5f 4f       	sbci	r21, 0xFF	; 255
 4e0:	3a f0       	brmi	.+14     	; 0x4f0 <__divsf3_pse+0x70>
 4e2:	9e 3f       	cpi	r25, 0xFE	; 254
 4e4:	51 05       	cpc	r21, r1
 4e6:	78 f0       	brcs	.+30     	; 0x506 <__divsf3_pse+0x86>
 4e8:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_inf>
 4ec:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_szero>
 4f0:	5f 3f       	cpi	r21, 0xFF	; 255
 4f2:	e4 f3       	brlt	.-8      	; 0x4ec <__divsf3_pse+0x6c>
 4f4:	98 3e       	cpi	r25, 0xE8	; 232
 4f6:	d4 f3       	brlt	.-12     	; 0x4ec <__divsf3_pse+0x6c>
 4f8:	86 95       	lsr	r24
 4fa:	77 95       	ror	r23
 4fc:	67 95       	ror	r22
 4fe:	b7 95       	ror	r27
 500:	f7 95       	ror	r31
 502:	9f 5f       	subi	r25, 0xFF	; 255
 504:	c9 f7       	brne	.-14     	; 0x4f8 <__divsf3_pse+0x78>
 506:	88 0f       	add	r24, r24
 508:	91 1d       	adc	r25, r1
 50a:	96 95       	lsr	r25
 50c:	87 95       	ror	r24
 50e:	97 f9       	bld	r25, 7
 510:	08 95       	ret
 512:	e1 e0       	ldi	r30, 0x01	; 1
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	88 1f       	adc	r24, r24
 51a:	bb 1f       	adc	r27, r27
 51c:	62 17       	cp	r22, r18
 51e:	73 07       	cpc	r23, r19
 520:	84 07       	cpc	r24, r20
 522:	ba 07       	cpc	r27, r26
 524:	20 f0       	brcs	.+8      	; 0x52e <__divsf3_pse+0xae>
 526:	62 1b       	sub	r22, r18
 528:	73 0b       	sbc	r23, r19
 52a:	84 0b       	sbc	r24, r20
 52c:	ba 0b       	sbc	r27, r26
 52e:	ee 1f       	adc	r30, r30
 530:	88 f7       	brcc	.-30     	; 0x514 <__divsf3_pse+0x94>
 532:	e0 95       	com	r30
 534:	08 95       	ret

00000536 <__fixsfsi>:
 536:	0e 94 a2 02 	call	0x544	; 0x544 <__fixunssfsi>
 53a:	68 94       	set
 53c:	b1 11       	cpse	r27, r1
 53e:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_szero>
 542:	08 95       	ret

00000544 <__fixunssfsi>:
 544:	0e 94 3e 03 	call	0x67c	; 0x67c <__fp_splitA>
 548:	88 f0       	brcs	.+34     	; 0x56c <__fixunssfsi+0x28>
 54a:	9f 57       	subi	r25, 0x7F	; 127
 54c:	98 f0       	brcs	.+38     	; 0x574 <__fixunssfsi+0x30>
 54e:	b9 2f       	mov	r27, r25
 550:	99 27       	eor	r25, r25
 552:	b7 51       	subi	r27, 0x17	; 23
 554:	b0 f0       	brcs	.+44     	; 0x582 <__fixunssfsi+0x3e>
 556:	e1 f0       	breq	.+56     	; 0x590 <__fixunssfsi+0x4c>
 558:	66 0f       	add	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	88 1f       	adc	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	1a f0       	brmi	.+6      	; 0x568 <__fixunssfsi+0x24>
 562:	ba 95       	dec	r27
 564:	c9 f7       	brne	.-14     	; 0x558 <__fixunssfsi+0x14>
 566:	14 c0       	rjmp	.+40     	; 0x590 <__fixunssfsi+0x4c>
 568:	b1 30       	cpi	r27, 0x01	; 1
 56a:	91 f0       	breq	.+36     	; 0x590 <__fixunssfsi+0x4c>
 56c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_zero>
 570:	b1 e0       	ldi	r27, 0x01	; 1
 572:	08 95       	ret
 574:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_zero>
 578:	67 2f       	mov	r22, r23
 57a:	78 2f       	mov	r23, r24
 57c:	88 27       	eor	r24, r24
 57e:	b8 5f       	subi	r27, 0xF8	; 248
 580:	39 f0       	breq	.+14     	; 0x590 <__fixunssfsi+0x4c>
 582:	b9 3f       	cpi	r27, 0xF9	; 249
 584:	cc f3       	brlt	.-14     	; 0x578 <__fixunssfsi+0x34>
 586:	86 95       	lsr	r24
 588:	77 95       	ror	r23
 58a:	67 95       	ror	r22
 58c:	b3 95       	inc	r27
 58e:	d9 f7       	brne	.-10     	; 0x586 <__fixunssfsi+0x42>
 590:	3e f4       	brtc	.+14     	; 0x5a0 <__fixunssfsi+0x5c>
 592:	90 95       	com	r25
 594:	80 95       	com	r24
 596:	70 95       	com	r23
 598:	61 95       	neg	r22
 59a:	7f 4f       	sbci	r23, 0xFF	; 255
 59c:	8f 4f       	sbci	r24, 0xFF	; 255
 59e:	9f 4f       	sbci	r25, 0xFF	; 255
 5a0:	08 95       	ret

000005a2 <__floatunsisf>:
 5a2:	e8 94       	clt
 5a4:	09 c0       	rjmp	.+18     	; 0x5b8 <__floatsisf+0x12>

000005a6 <__floatsisf>:
 5a6:	97 fb       	bst	r25, 7
 5a8:	3e f4       	brtc	.+14     	; 0x5b8 <__floatsisf+0x12>
 5aa:	90 95       	com	r25
 5ac:	80 95       	com	r24
 5ae:	70 95       	com	r23
 5b0:	61 95       	neg	r22
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	99 23       	and	r25, r25
 5ba:	a9 f0       	breq	.+42     	; 0x5e6 <__floatsisf+0x40>
 5bc:	f9 2f       	mov	r31, r25
 5be:	96 e9       	ldi	r25, 0x96	; 150
 5c0:	bb 27       	eor	r27, r27
 5c2:	93 95       	inc	r25
 5c4:	f6 95       	lsr	r31
 5c6:	87 95       	ror	r24
 5c8:	77 95       	ror	r23
 5ca:	67 95       	ror	r22
 5cc:	b7 95       	ror	r27
 5ce:	f1 11       	cpse	r31, r1
 5d0:	f8 cf       	rjmp	.-16     	; 0x5c2 <__floatsisf+0x1c>
 5d2:	fa f4       	brpl	.+62     	; 0x612 <__floatsisf+0x6c>
 5d4:	bb 0f       	add	r27, r27
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__floatsisf+0x36>
 5d8:	60 ff       	sbrs	r22, 0
 5da:	1b c0       	rjmp	.+54     	; 0x612 <__floatsisf+0x6c>
 5dc:	6f 5f       	subi	r22, 0xFF	; 255
 5de:	7f 4f       	sbci	r23, 0xFF	; 255
 5e0:	8f 4f       	sbci	r24, 0xFF	; 255
 5e2:	9f 4f       	sbci	r25, 0xFF	; 255
 5e4:	16 c0       	rjmp	.+44     	; 0x612 <__floatsisf+0x6c>
 5e6:	88 23       	and	r24, r24
 5e8:	11 f0       	breq	.+4      	; 0x5ee <__floatsisf+0x48>
 5ea:	96 e9       	ldi	r25, 0x96	; 150
 5ec:	11 c0       	rjmp	.+34     	; 0x610 <__floatsisf+0x6a>
 5ee:	77 23       	and	r23, r23
 5f0:	21 f0       	breq	.+8      	; 0x5fa <__floatsisf+0x54>
 5f2:	9e e8       	ldi	r25, 0x8E	; 142
 5f4:	87 2f       	mov	r24, r23
 5f6:	76 2f       	mov	r23, r22
 5f8:	05 c0       	rjmp	.+10     	; 0x604 <__floatsisf+0x5e>
 5fa:	66 23       	and	r22, r22
 5fc:	71 f0       	breq	.+28     	; 0x61a <__floatsisf+0x74>
 5fe:	96 e8       	ldi	r25, 0x86	; 134
 600:	86 2f       	mov	r24, r22
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	2a f0       	brmi	.+10     	; 0x612 <__floatsisf+0x6c>
 608:	9a 95       	dec	r25
 60a:	66 0f       	add	r22, r22
 60c:	77 1f       	adc	r23, r23
 60e:	88 1f       	adc	r24, r24
 610:	da f7       	brpl	.-10     	; 0x608 <__floatsisf+0x62>
 612:	88 0f       	add	r24, r24
 614:	96 95       	lsr	r25
 616:	87 95       	ror	r24
 618:	97 f9       	bld	r25, 7
 61a:	08 95       	ret

0000061c <__fp_inf>:
 61c:	97 f9       	bld	r25, 7
 61e:	9f 67       	ori	r25, 0x7F	; 127
 620:	80 e8       	ldi	r24, 0x80	; 128
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	60 e0       	ldi	r22, 0x00	; 0
 626:	08 95       	ret

00000628 <__fp_nan>:
 628:	9f ef       	ldi	r25, 0xFF	; 255
 62a:	80 ec       	ldi	r24, 0xC0	; 192
 62c:	08 95       	ret

0000062e <__fp_pscA>:
 62e:	00 24       	eor	r0, r0
 630:	0a 94       	dec	r0
 632:	16 16       	cp	r1, r22
 634:	17 06       	cpc	r1, r23
 636:	18 06       	cpc	r1, r24
 638:	09 06       	cpc	r0, r25
 63a:	08 95       	ret

0000063c <__fp_pscB>:
 63c:	00 24       	eor	r0, r0
 63e:	0a 94       	dec	r0
 640:	12 16       	cp	r1, r18
 642:	13 06       	cpc	r1, r19
 644:	14 06       	cpc	r1, r20
 646:	05 06       	cpc	r0, r21
 648:	08 95       	ret

0000064a <__fp_round>:
 64a:	09 2e       	mov	r0, r25
 64c:	03 94       	inc	r0
 64e:	00 0c       	add	r0, r0
 650:	11 f4       	brne	.+4      	; 0x656 <__fp_round+0xc>
 652:	88 23       	and	r24, r24
 654:	52 f0       	brmi	.+20     	; 0x66a <__fp_round+0x20>
 656:	bb 0f       	add	r27, r27
 658:	40 f4       	brcc	.+16     	; 0x66a <__fp_round+0x20>
 65a:	bf 2b       	or	r27, r31
 65c:	11 f4       	brne	.+4      	; 0x662 <__fp_round+0x18>
 65e:	60 ff       	sbrs	r22, 0
 660:	04 c0       	rjmp	.+8      	; 0x66a <__fp_round+0x20>
 662:	6f 5f       	subi	r22, 0xFF	; 255
 664:	7f 4f       	sbci	r23, 0xFF	; 255
 666:	8f 4f       	sbci	r24, 0xFF	; 255
 668:	9f 4f       	sbci	r25, 0xFF	; 255
 66a:	08 95       	ret

0000066c <__fp_split3>:
 66c:	57 fd       	sbrc	r21, 7
 66e:	90 58       	subi	r25, 0x80	; 128
 670:	44 0f       	add	r20, r20
 672:	55 1f       	adc	r21, r21
 674:	59 f0       	breq	.+22     	; 0x68c <__fp_splitA+0x10>
 676:	5f 3f       	cpi	r21, 0xFF	; 255
 678:	71 f0       	breq	.+28     	; 0x696 <__fp_splitA+0x1a>
 67a:	47 95       	ror	r20

0000067c <__fp_splitA>:
 67c:	88 0f       	add	r24, r24
 67e:	97 fb       	bst	r25, 7
 680:	99 1f       	adc	r25, r25
 682:	61 f0       	breq	.+24     	; 0x69c <__fp_splitA+0x20>
 684:	9f 3f       	cpi	r25, 0xFF	; 255
 686:	79 f0       	breq	.+30     	; 0x6a6 <__fp_splitA+0x2a>
 688:	87 95       	ror	r24
 68a:	08 95       	ret
 68c:	12 16       	cp	r1, r18
 68e:	13 06       	cpc	r1, r19
 690:	14 06       	cpc	r1, r20
 692:	55 1f       	adc	r21, r21
 694:	f2 cf       	rjmp	.-28     	; 0x67a <__fp_split3+0xe>
 696:	46 95       	lsr	r20
 698:	f1 df       	rcall	.-30     	; 0x67c <__fp_splitA>
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <__fp_splitA+0x30>
 69c:	16 16       	cp	r1, r22
 69e:	17 06       	cpc	r1, r23
 6a0:	18 06       	cpc	r1, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	f1 cf       	rjmp	.-30     	; 0x688 <__fp_splitA+0xc>
 6a6:	86 95       	lsr	r24
 6a8:	71 05       	cpc	r23, r1
 6aa:	61 05       	cpc	r22, r1
 6ac:	08 94       	sec
 6ae:	08 95       	ret

000006b0 <__fp_zero>:
 6b0:	e8 94       	clt

000006b2 <__fp_szero>:
 6b2:	bb 27       	eor	r27, r27
 6b4:	66 27       	eor	r22, r22
 6b6:	77 27       	eor	r23, r23
 6b8:	cb 01       	movw	r24, r22
 6ba:	97 f9       	bld	r25, 7
 6bc:	08 95       	ret

000006be <__mulsf3>:
 6be:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3x>
 6c2:	0c 94 25 03 	jmp	0x64a	; 0x64a <__fp_round>
 6c6:	0e 94 17 03 	call	0x62e	; 0x62e <__fp_pscA>
 6ca:	38 f0       	brcs	.+14     	; 0x6da <__mulsf3+0x1c>
 6cc:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_pscB>
 6d0:	20 f0       	brcs	.+8      	; 0x6da <__mulsf3+0x1c>
 6d2:	95 23       	and	r25, r21
 6d4:	11 f0       	breq	.+4      	; 0x6da <__mulsf3+0x1c>
 6d6:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_inf>
 6da:	0c 94 14 03 	jmp	0x628	; 0x628 <__fp_nan>
 6de:	11 24       	eor	r1, r1
 6e0:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_szero>

000006e4 <__mulsf3x>:
 6e4:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_split3>
 6e8:	70 f3       	brcs	.-36     	; 0x6c6 <__mulsf3+0x8>

000006ea <__mulsf3_pse>:
 6ea:	95 9f       	mul	r25, r21
 6ec:	c1 f3       	breq	.-16     	; 0x6de <__mulsf3+0x20>
 6ee:	95 0f       	add	r25, r21
 6f0:	50 e0       	ldi	r21, 0x00	; 0
 6f2:	55 1f       	adc	r21, r21
 6f4:	62 9f       	mul	r22, r18
 6f6:	f0 01       	movw	r30, r0
 6f8:	72 9f       	mul	r23, r18
 6fa:	bb 27       	eor	r27, r27
 6fc:	f0 0d       	add	r31, r0
 6fe:	b1 1d       	adc	r27, r1
 700:	63 9f       	mul	r22, r19
 702:	aa 27       	eor	r26, r26
 704:	f0 0d       	add	r31, r0
 706:	b1 1d       	adc	r27, r1
 708:	aa 1f       	adc	r26, r26
 70a:	64 9f       	mul	r22, r20
 70c:	66 27       	eor	r22, r22
 70e:	b0 0d       	add	r27, r0
 710:	a1 1d       	adc	r26, r1
 712:	66 1f       	adc	r22, r22
 714:	82 9f       	mul	r24, r18
 716:	22 27       	eor	r18, r18
 718:	b0 0d       	add	r27, r0
 71a:	a1 1d       	adc	r26, r1
 71c:	62 1f       	adc	r22, r18
 71e:	73 9f       	mul	r23, r19
 720:	b0 0d       	add	r27, r0
 722:	a1 1d       	adc	r26, r1
 724:	62 1f       	adc	r22, r18
 726:	83 9f       	mul	r24, r19
 728:	a0 0d       	add	r26, r0
 72a:	61 1d       	adc	r22, r1
 72c:	22 1f       	adc	r18, r18
 72e:	74 9f       	mul	r23, r20
 730:	33 27       	eor	r19, r19
 732:	a0 0d       	add	r26, r0
 734:	61 1d       	adc	r22, r1
 736:	23 1f       	adc	r18, r19
 738:	84 9f       	mul	r24, r20
 73a:	60 0d       	add	r22, r0
 73c:	21 1d       	adc	r18, r1
 73e:	82 2f       	mov	r24, r18
 740:	76 2f       	mov	r23, r22
 742:	6a 2f       	mov	r22, r26
 744:	11 24       	eor	r1, r1
 746:	9f 57       	subi	r25, 0x7F	; 127
 748:	50 40       	sbci	r21, 0x00	; 0
 74a:	9a f0       	brmi	.+38     	; 0x772 <__mulsf3_pse+0x88>
 74c:	f1 f0       	breq	.+60     	; 0x78a <__mulsf3_pse+0xa0>
 74e:	88 23       	and	r24, r24
 750:	4a f0       	brmi	.+18     	; 0x764 <__mulsf3_pse+0x7a>
 752:	ee 0f       	add	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	bb 1f       	adc	r27, r27
 758:	66 1f       	adc	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	91 50       	subi	r25, 0x01	; 1
 760:	50 40       	sbci	r21, 0x00	; 0
 762:	a9 f7       	brne	.-22     	; 0x74e <__mulsf3_pse+0x64>
 764:	9e 3f       	cpi	r25, 0xFE	; 254
 766:	51 05       	cpc	r21, r1
 768:	80 f0       	brcs	.+32     	; 0x78a <__mulsf3_pse+0xa0>
 76a:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__fp_inf>
 76e:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_szero>
 772:	5f 3f       	cpi	r21, 0xFF	; 255
 774:	e4 f3       	brlt	.-8      	; 0x76e <__mulsf3_pse+0x84>
 776:	98 3e       	cpi	r25, 0xE8	; 232
 778:	d4 f3       	brlt	.-12     	; 0x76e <__mulsf3_pse+0x84>
 77a:	86 95       	lsr	r24
 77c:	77 95       	ror	r23
 77e:	67 95       	ror	r22
 780:	b7 95       	ror	r27
 782:	f7 95       	ror	r31
 784:	e7 95       	ror	r30
 786:	9f 5f       	subi	r25, 0xFF	; 255
 788:	c1 f7       	brne	.-16     	; 0x77a <__mulsf3_pse+0x90>
 78a:	fe 2b       	or	r31, r30
 78c:	88 0f       	add	r24, r24
 78e:	91 1d       	adc	r25, r1
 790:	96 95       	lsr	r25
 792:	87 95       	ror	r24
 794:	97 f9       	bld	r25, 7
 796:	08 95       	ret

00000798 <__divmodhi4>:
 798:	97 fb       	bst	r25, 7
 79a:	07 2e       	mov	r0, r23
 79c:	16 f4       	brtc	.+4      	; 0x7a2 <__divmodhi4+0xa>
 79e:	00 94       	com	r0
 7a0:	07 d0       	rcall	.+14     	; 0x7b0 <__divmodhi4_neg1>
 7a2:	77 fd       	sbrc	r23, 7
 7a4:	09 d0       	rcall	.+18     	; 0x7b8 <__divmodhi4_neg2>
 7a6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__udivmodhi4>
 7aa:	07 fc       	sbrc	r0, 7
 7ac:	05 d0       	rcall	.+10     	; 0x7b8 <__divmodhi4_neg2>
 7ae:	3e f4       	brtc	.+14     	; 0x7be <__divmodhi4_exit>

000007b0 <__divmodhi4_neg1>:
 7b0:	90 95       	com	r25
 7b2:	81 95       	neg	r24
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	08 95       	ret

000007b8 <__divmodhi4_neg2>:
 7b8:	70 95       	com	r23
 7ba:	61 95       	neg	r22
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255

000007be <__divmodhi4_exit>:
 7be:	08 95       	ret

000007c0 <__tablejump2__>:
 7c0:	ee 0f       	add	r30, r30
 7c2:	ff 1f       	adc	r31, r31
 7c4:	05 90       	lpm	r0, Z+
 7c6:	f4 91       	lpm	r31, Z
 7c8:	e0 2d       	mov	r30, r0
 7ca:	09 94       	ijmp

000007cc <__udivmodhi4>:
 7cc:	aa 1b       	sub	r26, r26
 7ce:	bb 1b       	sub	r27, r27
 7d0:	51 e1       	ldi	r21, 0x11	; 17
 7d2:	07 c0       	rjmp	.+14     	; 0x7e2 <__udivmodhi4_ep>

000007d4 <__udivmodhi4_loop>:
 7d4:	aa 1f       	adc	r26, r26
 7d6:	bb 1f       	adc	r27, r27
 7d8:	a6 17       	cp	r26, r22
 7da:	b7 07       	cpc	r27, r23
 7dc:	10 f0       	brcs	.+4      	; 0x7e2 <__udivmodhi4_ep>
 7de:	a6 1b       	sub	r26, r22
 7e0:	b7 0b       	sbc	r27, r23

000007e2 <__udivmodhi4_ep>:
 7e2:	88 1f       	adc	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	5a 95       	dec	r21
 7e8:	a9 f7       	brne	.-22     	; 0x7d4 <__udivmodhi4_loop>
 7ea:	80 95       	com	r24
 7ec:	90 95       	com	r25
 7ee:	bc 01       	movw	r22, r24
 7f0:	cd 01       	movw	r24, r26
 7f2:	08 95       	ret

000007f4 <_exit>:
 7f4:	f8 94       	cli

000007f6 <__stop_program>:
 7f6:	ff cf       	rjmp	.-2      	; 0x7f6 <__stop_program>
