
Halim_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000698  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000607  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000262  00000000  00000000  00000ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000356  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int messung;

int main()
{
	DDRD |= 0xFF;
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a b9       	out	0x0a, r24	; 10
	ADMUX &= ~((1<<MUX3)|(1<<MUX2)|(1<<MUX1)|(1<<MUX0));
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 7f       	andi	r24, 0xF0	; 240
  9e:	80 83       	st	Z, r24
	ADMUX |= ((1<<REFS0)|(1<<REFS1));
  a0:	80 81       	ld	r24, Z
  a2:	80 6c       	ori	r24, 0xC0	; 192
  a4:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADPS2 | 1<<ADPS1 | 1<<ADPS0;
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	ADCSRA |= 1<<ADEN;
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	{
		ADCSRA |= (1<<ADSC);
		
		while(ADCSRA &(1<<ADSC));
		
		messung = ADC;
  b6:	a8 e7       	ldi	r26, 0x78	; 120
  b8:	b0 e0       	ldi	r27, 0x00	; 0
	


	while(1)
	{
		ADCSRA |= (1<<ADSC);
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
		
		while(ADCSRA &(1<<ADSC));
  c0:	80 81       	ld	r24, Z
  c2:	86 fd       	sbrc	r24, 6
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <main+0x30>
		
		messung = ADC;
  c6:	8d 91       	ld	r24, X+
  c8:	9c 91       	ld	r25, X
  ca:	11 97       	sbiw	r26, 0x01	; 1
  cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		
		if (messung >= 0)
  d4:	99 23       	and	r25, r25
  d6:	14 f0       	brlt	.+4      	; 0xdc <main+0x4c>
		{
			PORTD |= (1<<2);
  d8:	5a 9a       	sbi	0x0b, 2	; 11
  da:	01 c0       	rjmp	.+2      	; 0xde <main+0x4e>
		}
		else
		{
			PORTD &= ~(1<<2);
  dc:	5a 98       	cbi	0x0b, 2	; 11
		}
		if (messung >= 244)
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e6:	84 3f       	cpi	r24, 0xF4	; 244
  e8:	91 05       	cpc	r25, r1
  ea:	14 f0       	brlt	.+4      	; 0xf0 <main+0x60>
		{
			PORTD |= (1<<3);
  ec:	5b 9a       	sbi	0x0b, 3	; 11
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <main+0x62>
		}
		else
		{
			PORTD &= ~(1<<3);
  f0:	5b 98       	cbi	0x0b, 3	; 11
		}
		if (messung >= 511)
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  fa:	8f 3f       	cpi	r24, 0xFF	; 255
  fc:	91 40       	sbci	r25, 0x01	; 1
  fe:	14 f0       	brlt	.+4      	; 0x104 <main+0x74>
		{
			PORTD |= (1<<4);
 100:	5c 9a       	sbi	0x0b, 4	; 11
 102:	01 c0       	rjmp	.+2      	; 0x106 <main+0x76>
		}
		else
		{
			PORTD &= ~(1<<4);
 104:	5c 98       	cbi	0x0b, 4	; 11
		}
		if (messung >= 767)
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 10e:	8f 3f       	cpi	r24, 0xFF	; 255
 110:	92 40       	sbci	r25, 0x02	; 2
 112:	14 f0       	brlt	.+4      	; 0x118 <main+0x88>
		{
			PORTD |= (1<<5);
 114:	5d 9a       	sbi	0x0b, 5	; 11
 116:	01 c0       	rjmp	.+2      	; 0x11a <main+0x8a>
		}
		else
		{
			PORTD &= ~(1<<5);
 118:	5d 98       	cbi	0x0b, 5	; 11
		}
		if (messung == 1023)
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 122:	8f 3f       	cpi	r24, 0xFF	; 255
 124:	93 40       	sbci	r25, 0x03	; 3
 126:	11 f4       	brne	.+4      	; 0x12c <main+0x9c>
		{
			PORTD |= (1<<6);
 128:	5e 9a       	sbi	0x0b, 6	; 11
 12a:	c7 cf       	rjmp	.-114    	; 0xba <main+0x2a>
		}
		else
		{
			PORTD &= ~(1<<6);
 12c:	5e 98       	cbi	0x0b, 6	; 11
 12e:	c5 cf       	rjmp	.-118    	; 0xba <main+0x2a>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
