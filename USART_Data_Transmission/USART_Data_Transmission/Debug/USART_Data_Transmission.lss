
USART_Data_Transmission.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082b  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000745  00000000  00000000  00000a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000321  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f5  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014c  00000000  00000000  00001909  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:
	for (i=0; str[i] != 0; i++)
	{
		len++;
	}
	return(len);
}
  80:	87 e6       	ldi	r24, 0x67	; 103
  82:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  86:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  90:	78 94       	sei
  92:	08 95       	ret

00000094 <USART_SendByte>:
  94:	e0 ec       	ldi	r30, 0xC0	; 192
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	90 81       	ld	r25, Z
  9a:	95 ff       	sbrs	r25, 5
  9c:	fd cf       	rjmp	.-6      	; 0x98 <USART_SendByte+0x4>
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a2:	08 95       	ret

000000a4 <main>:

int main(void) {
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x6>
  aa:	00 d0       	rcall	.+0      	; 0xac <main+0x8>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	
	int i;
	uint8_t Data[4] = {'1', '2', '3', '4'};
  b0:	81 e3       	ldi	r24, 0x31	; 49
  b2:	89 83       	std	Y+1, r24	; 0x01
  b4:	82 e3       	ldi	r24, 0x32	; 50
  b6:	8a 83       	std	Y+2, r24	; 0x02
  b8:	83 e3       	ldi	r24, 0x33	; 51
  ba:	8b 83       	std	Y+3, r24	; 0x03
  bc:	84 e3       	ldi	r24, 0x34	; 52
  be:	8c 83       	std	Y+4, r24	; 0x04
	
	USART_Init();
  c0:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
  c4:	7e 01       	movw	r14, r28
  c6:	25 e0       	ldi	r18, 0x05	; 5
  c8:	e2 0e       	add	r14, r18
  ca:	f1 1c       	adc	r15, r1
  cc:	8e 01       	movw	r16, r28
  ce:	0f 5f       	subi	r16, 0xFF	; 255
  d0:	1f 4f       	sbci	r17, 0xFF	; 255
	
    while(1) {
		for(i = 0; i < 4; i++) {
			USART_SendByte(Data[i]);
  d2:	f8 01       	movw	r30, r16
  d4:	81 91       	ld	r24, Z+
  d6:	8f 01       	movw	r16, r30
  d8:	0e 94 4a 00 	call	0x94	; 0x94 <USART_SendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	8f ed       	ldi	r24, 0xDF	; 223
  de:	9e e2       	ldi	r25, 0x2E	; 46
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x3c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x42>
  e6:	00 00       	nop
	uint8_t Data[4] = {'1', '2', '3', '4'};
	
	USART_Init();
	
    while(1) {
		for(i = 0; i < 4; i++) {
  e8:	0e 15       	cp	r16, r14
  ea:	1f 05       	cpc	r17, r15
  ec:	91 f7       	brne	.-28     	; 0xd2 <main+0x2e>
  ee:	9f ef       	ldi	r25, 0xFF	; 255
  f0:	e1 ee       	ldi	r30, 0xE1	; 225
  f2:	f4 e0       	ldi	r31, 0x04	; 4
  f4:	91 50       	subi	r25, 0x01	; 1
  f6:	e0 40       	sbci	r30, 0x00	; 0
  f8:	f0 40       	sbci	r31, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x50>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x5a>
  fe:	00 00       	nop
 100:	e5 cf       	rjmp	.-54     	; 0xcc <main+0x28>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
