
TWI_Data_Transmission_from_Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000003d0  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800114  00800114  00000478  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000843  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e2  00000000  00000000  00000d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003db  00000000  00000000  0000143d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000139  00000000  00000000  00001cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001e0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  60:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_24>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  68:	b6 00       	.word	0x00b6	; ????
  6a:	69 01       	movw	r12, r18
  6c:	69 01       	movw	r12, r18
  6e:	69 01       	movw	r12, r18
  70:	69 01       	movw	r12, r18
  72:	69 01       	movw	r12, r18
  74:	69 01       	movw	r12, r18
  76:	69 01       	movw	r12, r18
  78:	bd 00       	.word	0x00bd	; ????
  7a:	69 01       	movw	r12, r18
  7c:	69 01       	movw	r12, r18
  7e:	69 01       	movw	r12, r18
  80:	69 01       	movw	r12, r18
  82:	69 01       	movw	r12, r18
  84:	69 01       	movw	r12, r18
  86:	69 01       	movw	r12, r18
  88:	c8 00       	.word	0x00c8	; ????
  8a:	69 01       	movw	r12, r18
  8c:	69 01       	movw	r12, r18
  8e:	69 01       	movw	r12, r18
  90:	69 01       	movw	r12, r18
  92:	69 01       	movw	r12, r18
  94:	69 01       	movw	r12, r18
  96:	69 01       	movw	r12, r18
  98:	cf 00       	.word	0x00cf	; ????
  9a:	69 01       	movw	r12, r18
  9c:	69 01       	movw	r12, r18
  9e:	69 01       	movw	r12, r18
  a0:	69 01       	movw	r12, r18
  a2:	69 01       	movw	r12, r18
  a4:	69 01       	movw	r12, r18
  a6:	69 01       	movw	r12, r18
  a8:	d6 00       	.word	0x00d6	; ????
  aa:	69 01       	movw	r12, r18
  ac:	69 01       	movw	r12, r18
  ae:	69 01       	movw	r12, r18
  b0:	69 01       	movw	r12, r18
  b2:	69 01       	movw	r12, r18
  b4:	69 01       	movw	r12, r18
  b6:	69 01       	movw	r12, r18
  b8:	1c 01       	movw	r2, r24
  ba:	69 01       	movw	r12, r18
  bc:	69 01       	movw	r12, r18
  be:	69 01       	movw	r12, r18
  c0:	69 01       	movw	r12, r18
  c2:	69 01       	movw	r12, r18
  c4:	69 01       	movw	r12, r18
  c6:	69 01       	movw	r12, r18
  c8:	5d 01       	movw	r10, r26

000000ca <__ctors_end>:
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf ef       	ldi	r28, 0xFF	; 255
  d0:	d8 e0       	ldi	r29, 0x08	; 8
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
  d6:	11 e0       	ldi	r17, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	e0 ed       	ldi	r30, 0xD0	; 208
  de:	f3 e0       	ldi	r31, 0x03	; 3
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
  e2:	05 90       	lpm	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	a4 31       	cpi	r26, 0x14	; 20
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	a4 e1       	ldi	r26, 0x14	; 20
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	a8 32       	cpi	r26, 0x28	; 40
  f8:	b2 07       	cpc	r27, r18
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
  fc:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
 100:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <sendDataByte>:
int data_length;
int data[4];
int seg_codes[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
	
void sendDataByte(int reg_value) {
	TWDR = reg_value;
 108:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR |= (1 << TWINT);
 10c:	ec eb       	ldi	r30, 0xBC	; 188
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 68       	ori	r24, 0x80	; 128
 114:	80 83       	st	Z, r24
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
 116:	80 81       	ld	r24, Z
 118:	8f 7c       	andi	r24, 0xCF	; 207
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <__vector_24>:
}

ISR(TWI_vect) {
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	
	status_value = TWSR;
 140:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 144:	e8 2f       	mov	r30, r24
 146:	e8 7f       	andi	r30, 0xF8	; 248
	status_value &= 0b11111000;
 148:	8e 2f       	mov	r24, r30
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <status_value+0x1>
 150:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status_value>
	
	switch(status_value) {
 154:	8e 2f       	mov	r24, r30
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fc 01       	movw	r30, r24
 15a:	38 97       	sbiw	r30, 0x08	; 8
 15c:	e1 33       	cpi	r30, 0x31	; 49
 15e:	f1 05       	cpc	r31, r1
 160:	08 f0       	brcs	.+2      	; 0x164 <__vector_24+0x46>
 162:	b7 c0       	rjmp	.+366    	; 0x2d2 <__vector_24+0x1b4>
 164:	ec 5c       	subi	r30, 0xCC	; 204
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__tablejump2__>
		case 0x08:
			sendDataByte(adress_byte);
 16c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <adress_byte>
 170:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <adress_byte+0x1>
 174:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
			break;
 178:	ac c0       	rjmp	.+344    	; 0x2d2 <__vector_24+0x1b4>
		case 0x10:
			i = 0;
 17a:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 17e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
			sendDataByte(adress_byte);
 182:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <adress_byte>
 186:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <adress_byte+0x1>
 18a:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
		break;
 18e:	a1 c0       	rjmp	.+322    	; 0x2d2 <__vector_24+0x1b4>
		case 0x18:
			sendDataByte(instruction_byte);
 190:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <instruction_byte>
 194:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <instruction_byte+0x1>
 198:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
			break;
 19c:	9a c0       	rjmp	.+308    	; 0x2d2 <__vector_24+0x1b4>
		case 0x20:
			sendDataByte(instruction_byte);
 19e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <instruction_byte>
 1a2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <instruction_byte+0x1>
 1a6:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
			break;
 1aa:	93 c0       	rjmp	.+294    	; 0x2d2 <__vector_24+0x1b4>
		case 0x28:
			if(i == 0) {
 1ac:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1b0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	81 f4       	brne	.+32     	; 0x1d8 <__vector_24+0xba>
				sendDataByte(control_byte);
 1b8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <control_byte>
 1bc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <control_byte+0x1>
 1c0:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
				i++;
 1c4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 1c8:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 1d2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 1d6:	7d c0       	rjmp	.+250    	; 0x2d2 <__vector_24+0x1b4>
			}
			else if(i < data_length + 1) {
 1d8:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <data_length>
 1dc:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <data_length+0x1>
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	82 17       	cp	r24, r18
 1e6:	93 07       	cpc	r25, r19
 1e8:	d4 f4       	brge	.+52     	; 0x21e <__vector_24+0x100>
				sendDataByte(seg_codes[data[i-1]]);
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	fc 01       	movw	r30, r24
 1f0:	e4 5e       	subi	r30, 0xE4	; 228
 1f2:	fe 4f       	sbci	r31, 0xFE	; 254
 1f4:	01 90       	ld	r0, Z+
 1f6:	f0 81       	ld	r31, Z
 1f8:	e0 2d       	mov	r30, r0
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	e0 50       	subi	r30, 0x00	; 0
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	80 81       	ld	r24, Z
 204:	91 81       	ldd	r25, Z+1	; 0x01
 206:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
				i++;
 20a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 20e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 218:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 21c:	5a c0       	rjmp	.+180    	; 0x2d2 <__vector_24+0x1b4>
			}
			else {
				i = 0;
 21e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 222:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
				TWCR |= (1 << TWINT) | (1 << TWSTO);
 226:	ec eb       	ldi	r30, 0xBC	; 188
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	80 69       	ori	r24, 0x90	; 144
 22e:	80 83       	st	Z, r24
				TWCR &= ~(1 << TWSTA);
 230:	80 81       	ld	r24, Z
 232:	8f 7d       	andi	r24, 0xDF	; 223
 234:	80 83       	st	Z, r24
 236:	4d c0       	rjmp	.+154    	; 0x2d2 <__vector_24+0x1b4>
			}
			break;
		case 0x30:
			if(i == 1) {
 238:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 23c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	91 05       	cpc	r25, r1
 244:	81 f4       	brne	.+32     	; 0x266 <__vector_24+0x148>
				sendDataByte(control_byte);
 246:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <control_byte>
 24a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <control_byte+0x1>
 24e:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
				i++;
 252:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 256:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 260:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 264:	36 c0       	rjmp	.+108    	; 0x2d2 <__vector_24+0x1b4>
			}
			else if(i < 6) {
 266:	86 30       	cpi	r24, 0x06	; 6
 268:	91 05       	cpc	r25, r1
 26a:	d4 f4       	brge	.+52     	; 0x2a0 <__vector_24+0x182>
				sendDataByte(seg_codes[data[i]]);
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	fc 01       	movw	r30, r24
 272:	e2 5e       	subi	r30, 0xE2	; 226
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	01 90       	ld	r0, Z+
 278:	f0 81       	ld	r31, Z
 27a:	e0 2d       	mov	r30, r0
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	e0 50       	subi	r30, 0x00	; 0
 282:	ff 4f       	sbci	r31, 0xFF	; 255
 284:	80 81       	ld	r24, Z
 286:	91 81       	ldd	r25, Z+1	; 0x01
 288:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
				i++;
 28c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 290:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 29a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 29e:	19 c0       	rjmp	.+50     	; 0x2d2 <__vector_24+0x1b4>
			}
			else {
				i = 0;
 2a0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 2a4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
				TWCR |= (1 << TWINT) | (1 << TWSTA);
 2a8:	ec eb       	ldi	r30, 0xBC	; 188
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	80 6a       	ori	r24, 0xA0	; 160
 2b0:	80 83       	st	Z, r24
				TWCR &= ~(1 << TWSTO);
 2b2:	80 81       	ld	r24, Z
 2b4:	8f 7e       	andi	r24, 0xEF	; 239
 2b6:	80 83       	st	Z, r24
 2b8:	0c c0       	rjmp	.+24     	; 0x2d2 <__vector_24+0x1b4>
			}
			break;
		case 0x38:
			i = 0;
 2ba:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 2be:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
			TWCR |= (1 << TWINT) | (1 << TWSTA);
 2c2:	ec eb       	ldi	r30, 0xBC	; 188
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	80 6a       	ori	r24, 0xA0	; 160
 2ca:	80 83       	st	Z, r24
			TWCR &= ~(1 << TWSTO);
 2cc:	80 81       	ld	r24, Z
 2ce:	8f 7e       	andi	r24, 0xEF	; 239
 2d0:	80 83       	st	Z, r24
			break;
		default:
			return;
	}
}
 2d2:	ff 91       	pop	r31
 2d4:	ef 91       	pop	r30
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <main>:

int main(void) {
	
	adress_byte = 0x70;
 2f4:	80 e7       	ldi	r24, 0x70	; 112
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <adress_byte+0x1>
 2fc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <adress_byte>
	data_length = 4;
 300:	84 e0       	ldi	r24, 0x04	; 4
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <data_length+0x1>
 308:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <data_length>
	instruction_byte = 0;
 30c:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <instruction_byte+0x1>
 310:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <instruction_byte>
	control_byte = 0b01000111;
 314:	87 e4       	ldi	r24, 0x47	; 71
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <control_byte+0x1>
 31c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <control_byte>
	data[0] = 0;
 320:	ee e1       	ldi	r30, 0x1E	; 30
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	11 82       	std	Z+1, r1	; 0x01
 326:	10 82       	st	Z, r1
	data[1] = 0;
 328:	13 82       	std	Z+3, r1	; 0x03
 32a:	12 82       	std	Z+2, r1	; 0x02
	data[2] = 0;
 32c:	15 82       	std	Z+5, r1	; 0x05
 32e:	14 82       	std	Z+4, r1	; 0x04
	data[3] = 0;
 330:	17 82       	std	Z+7, r1	; 0x07
 332:	16 82       	std	Z+6, r1	; 0x06
	
	TWBR = 0b01001000;
 334:	88 e4       	ldi	r24, 0x48	; 72
 336:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR |= (1 << TWIE) | (1 << TWEN);
 33a:	ec eb       	ldi	r30, 0xBC	; 188
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	85 60       	ori	r24, 0x05	; 5
 342:	80 83       	st	Z, r24
	sei();
 344:	78 94       	sei
	
    while (1) {
		TWCR |= (1 << TWSTA) | (1 << TWINT);
 346:	ac eb       	ldi	r26, 0xBC	; 188
 348:	b0 e0       	ldi	r27, 0x00	; 0
		_delay_ms(100);
		if(data[3] == 9) {
 34a:	ee e1       	ldi	r30, 0x1E	; 30
 34c:	f1 e0       	ldi	r31, 0x01	; 1
	TWBR = 0b01001000;
	TWCR |= (1 << TWIE) | (1 << TWEN);
	sei();
	
    while (1) {
		TWCR |= (1 << TWSTA) | (1 << TWINT);
 34e:	8c 91       	ld	r24, X
 350:	80 6a       	ori	r24, 0xA0	; 160
 352:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	81 ee       	ldi	r24, 0xE1	; 225
 358:	94 e0       	ldi	r25, 0x04	; 4
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <main+0x66>
 362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x70>
 364:	00 00       	nop
		_delay_ms(100);
		if(data[3] == 9) {
 366:	86 81       	ldd	r24, Z+6	; 0x06
 368:	97 81       	ldd	r25, Z+7	; 0x07
 36a:	89 30       	cpi	r24, 0x09	; 9
 36c:	91 05       	cpc	r25, r1
 36e:	21 f5       	brne	.+72     	; 0x3b8 <main+0xc4>
			data[3] = 0;
 370:	17 82       	std	Z+7, r1	; 0x07
 372:	16 82       	std	Z+6, r1	; 0x06
			if(data[2] == 9) {
 374:	84 81       	ldd	r24, Z+4	; 0x04
 376:	95 81       	ldd	r25, Z+5	; 0x05
 378:	89 30       	cpi	r24, 0x09	; 9
 37a:	91 05       	cpc	r25, r1
 37c:	c9 f4       	brne	.+50     	; 0x3b0 <main+0xbc>
				data[2] = 0;
 37e:	15 82       	std	Z+5, r1	; 0x05
 380:	14 82       	std	Z+4, r1	; 0x04
				if(data[1] == 9) {
 382:	82 81       	ldd	r24, Z+2	; 0x02
 384:	93 81       	ldd	r25, Z+3	; 0x03
 386:	89 30       	cpi	r24, 0x09	; 9
 388:	91 05       	cpc	r25, r1
 38a:	71 f4       	brne	.+28     	; 0x3a8 <main+0xb4>
					data[1] = 0;
 38c:	13 82       	std	Z+3, r1	; 0x03
 38e:	12 82       	std	Z+2, r1	; 0x02
					if(data[0] == 9) {
 390:	80 81       	ld	r24, Z
 392:	91 81       	ldd	r25, Z+1	; 0x01
 394:	89 30       	cpi	r24, 0x09	; 9
 396:	91 05       	cpc	r25, r1
 398:	19 f4       	brne	.+6      	; 0x3a0 <main+0xac>
						data[0] = 0;
 39a:	11 82       	std	Z+1, r1	; 0x01
 39c:	10 82       	st	Z, r1
 39e:	d7 cf       	rjmp	.-82     	; 0x34e <main+0x5a>
					}
					else
						data[0]++;
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	91 83       	std	Z+1, r25	; 0x01
 3a4:	80 83       	st	Z, r24
 3a6:	d3 cf       	rjmp	.-90     	; 0x34e <main+0x5a>
				}
				else 
					data[1]++;
 3a8:	01 96       	adiw	r24, 0x01	; 1
 3aa:	93 83       	std	Z+3, r25	; 0x03
 3ac:	82 83       	std	Z+2, r24	; 0x02
 3ae:	cf cf       	rjmp	.-98     	; 0x34e <main+0x5a>
			}
			else 
				data[2]++;
 3b0:	01 96       	adiw	r24, 0x01	; 1
 3b2:	95 83       	std	Z+5, r25	; 0x05
 3b4:	84 83       	std	Z+4, r24	; 0x04
 3b6:	cb cf       	rjmp	.-106    	; 0x34e <main+0x5a>
		}
		else
			data[3]++;
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	97 83       	std	Z+7, r25	; 0x07
 3bc:	86 83       	std	Z+6, r24	; 0x06
 3be:	c7 cf       	rjmp	.-114    	; 0x34e <main+0x5a>

000003c0 <__tablejump2__>:
 3c0:	ee 0f       	add	r30, r30
 3c2:	ff 1f       	adc	r31, r31
 3c4:	05 90       	lpm	r0, Z+
 3c6:	f4 91       	lpm	r31, Z
 3c8:	e0 2d       	mov	r30, r0
 3ca:	09 94       	ijmp

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
