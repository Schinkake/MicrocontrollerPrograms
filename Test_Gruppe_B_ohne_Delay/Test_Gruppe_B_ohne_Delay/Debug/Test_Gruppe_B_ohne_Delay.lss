
Test_Gruppe_B_ohne_Delay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000120  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a4  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000621  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000244  00000000  00000000  00000ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_11>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  8e:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_11>:
#include <avr/io.h>
#include <avr/interrupt.h>

int swap = 1;

ISR(TIMER1_COMPA_vect) {
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	if(swap) {
  a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ac:	89 2b       	or	r24, r25
  ae:	39 f0       	breq	.+14     	; 0xbe <__vector_11+0x28>
		OCR0A = 5;
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	87 bd       	out	0x27, r24	; 39
		swap = 0;
  b4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
  b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
  bc:	08 c0       	rjmp	.+16     	; 0xce <__vector_11+0x38>
	}
	else {
		OCR0A = 243;
  be:	83 ef       	ldi	r24, 0xF3	; 243
  c0:	87 bd       	out	0x27, r24	; 39
		swap = 1;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <main>:

int main(void)
{
	DDRD |= (1 << DDD6); // PD6 is an output
  dc:	56 9a       	sbi	0x0a, 6	; 10

	TCCR0A |= (1 << COM0A1); // Clear OC0A on compare match when up-counting. Set OC0A on compare match when down-counting.
  de:	84 b5       	in	r24, 0x24	; 36
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	84 bd       	out	0x24, r24	; 36

	TCCR0A |= (1 << WGM00); // Phase Correct PWM Mode with 0xFF (255) as TOP
  e4:	84 b5       	in	r24, 0x24	; 36
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	84 bd       	out	0x24, r24	; 36

	TCCR0B |= (1 << CS02) | (1 << CS00); // Prescaler equals 1024
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	85 60       	ori	r24, 0x05	; 5
  ee:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 0; // set duty cycle to 0%
  f0:	17 bc       	out	0x27, r1	; 39


	TCCR1B |= (1 << WGM12); // Set TCNT1 in CTC mode
  f2:	e1 e8       	ldi	r30, 0x81	; 129
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24

	TCCR1B |= ((1 << CS10) | (1 << CS12)); // Prescaler equals 1024
  fc:	80 81       	ld	r24, Z
  fe:	85 60       	ori	r24, 0x05	; 5
 100:	80 83       	st	Z, r24
	
	TIMSK1 |= (1 << OCIE1A); // Enable the COMPA CTC interrupt
 102:	ef e6       	ldi	r30, 0x6F	; 111
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24

	OCR1AL = (uint8_t)65535;//15625; // TOP value of TCNT1
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1AH = (uint8_t)12590;
 112:	8e e2       	ldi	r24, 0x2E	; 46
 114:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	sei();
 118:	78 94       	sei
 11a:	ff cf       	rjmp	.-2      	; 0x11a <main+0x3e>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
