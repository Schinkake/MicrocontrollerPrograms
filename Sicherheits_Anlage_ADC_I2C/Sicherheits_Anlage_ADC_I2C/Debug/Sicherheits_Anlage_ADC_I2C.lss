
Sicherheits_Anlage_ADC_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000038e  00000422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  0000042c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a5  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076a  00000000  00000000  00000e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000407  00000000  00000000  000015fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047b  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038e  00000000  00000000  00001f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_21>
  58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_24>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  68:	f6 00       	.word	0x00f6	; ????
  6a:	20 01       	movw	r4, r0
  6c:	20 01       	movw	r4, r0
  6e:	20 01       	movw	r4, r0
  70:	20 01       	movw	r4, r0
  72:	20 01       	movw	r4, r0
  74:	20 01       	movw	r4, r0
  76:	20 01       	movw	r4, r0
  78:	fa 00       	.word	0x00fa	; ????
  7a:	20 01       	movw	r4, r0
  7c:	20 01       	movw	r4, r0
  7e:	20 01       	movw	r4, r0
  80:	20 01       	movw	r4, r0
  82:	20 01       	movw	r4, r0
  84:	20 01       	movw	r4, r0
  86:	20 01       	movw	r4, r0
  88:	fe 00       	.word	0x00fe	; ????
  8a:	20 01       	movw	r4, r0
  8c:	20 01       	movw	r4, r0
  8e:	20 01       	movw	r4, r0
  90:	20 01       	movw	r4, r0
  92:	20 01       	movw	r4, r0
  94:	20 01       	movw	r4, r0
  96:	20 01       	movw	r4, r0
  98:	02 01       	movw	r0, r4
  9a:	20 01       	movw	r4, r0
  9c:	20 01       	movw	r4, r0
  9e:	20 01       	movw	r4, r0
  a0:	20 01       	movw	r4, r0
  a2:	20 01       	movw	r4, r0
  a4:	20 01       	movw	r4, r0
  a6:	20 01       	movw	r4, r0
  a8:	05 01       	movw	r0, r10
  aa:	20 01       	movw	r4, r0
  ac:	20 01       	movw	r4, r0
  ae:	20 01       	movw	r4, r0
  b0:	20 01       	movw	r4, r0
  b2:	20 01       	movw	r4, r0
  b4:	20 01       	movw	r4, r0
  b6:	20 01       	movw	r4, r0
  b8:	17 01       	movw	r2, r14
  ba:	20 01       	movw	r4, r0
  bc:	20 01       	movw	r4, r0
  be:	20 01       	movw	r4, r0
  c0:	20 01       	movw	r4, r0
  c2:	20 01       	movw	r4, r0
  c4:	20 01       	movw	r4, r0
  c6:	20 01       	movw	r4, r0
  c8:	1a 01       	movw	r2, r20

000000ca <__ctors_end>:
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf ef       	ldi	r28, 0xFF	; 255
  d0:	d8 e0       	ldi	r29, 0x08	; 8
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
  d6:	11 e0       	ldi	r17, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	ee e8       	ldi	r30, 0x8E	; 142
  de:	f3 e0       	ldi	r31, 0x03	; 3
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
  e2:	05 90       	lpm	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	aa 30       	cpi	r26, 0x0A	; 10
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	aa e0       	ldi	r26, 0x0A	; 10
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	ad 30       	cpi	r26, 0x0D	; 13
  f8:	b2 07       	cpc	r27, r18
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
  fc:	0e 94 37 01 	call	0x26e	; 0x26e <main>
 100:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <__vector_21>:
#include <util/delay.h>

int messung;
uint8_t status_byte;

ISR(ADC_vect) {
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	messung = ADC;
 116:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 11a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 11e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <messung+0x1>
 122:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <messung>
}
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_24>:

ISR(TWI_vect) {
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24
	status_byte = TWSR;
 140:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	status_byte &= 0b11111000;
 144:	88 7f       	andi	r24, 0xF8	; 248
 146:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <initTWI>:

void sendPacket(int data_length, uint8_t address_byte, uint8_t instruction_byte, uint8_t data[]);

void initTWI(uint8_t bitRate_byte) {
	TWBR = bitRate_byte;
 156:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR |= (1 << TWIE) | (1 << TWEN);
 15a:	ec eb       	ldi	r30, 0xBC	; 188
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	85 60       	ori	r24, 0x05	; 5
 162:	80 83       	st	Z, r24
	sei();
 164:	78 94       	sei
 166:	08 95       	ret

00000168 <stopCondition>:
}

void stopCondition() {
	TWCR |= (1 << TWINT) | (1 << TWSTO);
 168:	ec eb       	ldi	r30, 0xBC	; 188
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 69       	ori	r24, 0x90	; 144
 170:	80 83       	st	Z, r24
	TWCR &= ~(1 << TWSTA);
 172:	80 81       	ld	r24, Z
 174:	8f 7d       	andi	r24, 0xDF	; 223
 176:	80 83       	st	Z, r24
 178:	08 95       	ret

0000017a <sendDataByte>:
}

void sendDataByte(int reg_value) {
	TWDR = reg_value;
 17a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR |= (1 << TWINT);
 17e:	ec eb       	ldi	r30, 0xBC	; 188
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 68       	ori	r24, 0x80	; 128
 186:	80 83       	st	Z, r24
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
 188:	80 81       	ld	r24, Z
 18a:	8f 7c       	andi	r24, 0xCF	; 207
 18c:	80 83       	st	Z, r24
 18e:	08 95       	ret

00000190 <sendPacket>:
		}
		sendPacket(5, 0x70, 0x00, data); // Sending the data of the seconds and minutes to the display chip, 0x70 = Display Address
	}
}

void sendPacket(int data_length, uint8_t address_byte, uint8_t instruction_byte, uint8_t data[]) {
 190:	8f 92       	push	r8
 192:	9f 92       	push	r9
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	7c 01       	movw	r14, r24
	
	int i = 0;
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
 1aa:	ec eb       	ldi	r30, 0xBC	; 188
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	90 81       	ld	r25, Z
 1b0:	90 6a       	ori	r25, 0xA0	; 160
 1b2:	90 83       	st	Z, r25
	
	while(!(i > data_length)) {
 1b4:	ff 20       	and	r15, r15
 1b6:	0c f4       	brge	.+2      	; 0x1ba <sendPacket+0x2a>
 1b8:	4d c0       	rjmp	.+154    	; 0x254 <sendPacket+0xc4>
 1ba:	49 01       	movw	r8, r18
 1bc:	00 e0       	ldi	r16, 0x00	; 0
 1be:	10 e0       	ldi	r17, 0x00	; 0
		
		while(!(TWCR & (1 << TWINT)));
 1c0:	cc eb       	ldi	r28, 0xBC	; 188
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
			break;
			case 0x10:
			sendDataByte(address_byte);
			break;
			case 0x18:
			sendDataByte(instruction_byte);
 1c4:	a4 2e       	mov	r10, r20
 1c6:	b1 2c       	mov	r11, r1
		switch(status_byte) {
			case 0x08:
			sendDataByte(address_byte);
			break;
			case 0x10:
			sendDataByte(address_byte);
 1c8:	c6 2e       	mov	r12, r22
 1ca:	d1 2c       	mov	r13, r1
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
	
	while(!(i > data_length)) {
		
		while(!(TWCR & (1 << TWINT)));
 1cc:	88 81       	ld	r24, Y
 1ce:	88 23       	and	r24, r24
 1d0:	ec f7       	brge	.-6      	; 0x1cc <sendPacket+0x3c>
		
		switch(status_byte) {
 1d2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 1d6:	8e 2f       	mov	r24, r30
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	38 97       	sbiw	r30, 0x08	; 8
 1de:	e1 33       	cpi	r30, 0x31	; 49
 1e0:	f1 05       	cpc	r31, r1
 1e2:	70 f5       	brcc	.+92     	; 0x240 <sendPacket+0xb0>
 1e4:	ec 5c       	subi	r30, 0xCC	; 204
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	0c 94 ab 01 	jmp	0x356	; 0x356 <__tablejump2__>
			case 0x08:
			sendDataByte(address_byte);
 1ec:	c6 01       	movw	r24, r12
 1ee:	0e 94 bd 00 	call	0x17a	; 0x17a <sendDataByte>
			break;
 1f2:	26 c0       	rjmp	.+76     	; 0x240 <sendPacket+0xb0>
			case 0x10:
			sendDataByte(address_byte);
 1f4:	c6 01       	movw	r24, r12
 1f6:	0e 94 bd 00 	call	0x17a	; 0x17a <sendDataByte>
			break;
 1fa:	22 c0       	rjmp	.+68     	; 0x240 <sendPacket+0xb0>
			case 0x18:
			sendDataByte(instruction_byte);
 1fc:	c5 01       	movw	r24, r10
 1fe:	0e 94 bd 00 	call	0x17a	; 0x17a <sendDataByte>
			break;
 202:	1e c0       	rjmp	.+60     	; 0x240 <sendPacket+0xb0>
			case 0x20:
			stopCondition();
 204:	0e 94 b4 00 	call	0x168	; 0x168 <stopCondition>
			break;
 208:	1b c0       	rjmp	.+54     	; 0x240 <sendPacket+0xb0>
			case 0x28:
			if(i < data_length) {
 20a:	0e 15       	cp	r16, r14
 20c:	1f 05       	cpc	r17, r15
 20e:	54 f4       	brge	.+20     	; 0x224 <sendPacket+0x94>
				sendDataByte(data[i]);
 210:	f4 01       	movw	r30, r8
 212:	e0 0f       	add	r30, r16
 214:	f1 1f       	adc	r31, r17
 216:	80 81       	ld	r24, Z
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 bd 00 	call	0x17a	; 0x17a <sendDataByte>
				i++;
 21e:	0f 5f       	subi	r16, 0xFF	; 255
 220:	1f 4f       	sbci	r17, 0xFF	; 255
 222:	0e c0       	rjmp	.+28     	; 0x240 <sendPacket+0xb0>
			}
			else {
				stopCondition();
 224:	0e 94 b4 00 	call	0x168	; 0x168 <stopCondition>
				i++;
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	09 c0       	rjmp	.+18     	; 0x240 <sendPacket+0xb0>
			}
			break;
			case 0x30:
			stopCondition();
 22e:	0e 94 b4 00 	call	0x168	; 0x168 <stopCondition>
			break;
 232:	06 c0       	rjmp	.+12     	; 0x240 <sendPacket+0xb0>
			case 0x38:
			TWCR |= (1 << TWINT) | (1 << TWSTA); // Wait until the Bus is free and then send a START
 234:	88 81       	ld	r24, Y
 236:	80 6a       	ori	r24, 0xA0	; 160
 238:	88 83       	st	Y, r24
			TWCR &= ~(1 << TWSTO);
 23a:	88 81       	ld	r24, Y
 23c:	8f 7e       	andi	r24, 0xEF	; 239
 23e:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	87 e6       	ldi	r24, 0x67	; 103
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <sendPacket+0xb4>
 248:	00 c0       	rjmp	.+0      	; 0x24a <sendPacket+0xba>
 24a:	00 00       	nop
	
	int i = 0;
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
	
	while(!(i > data_length)) {
 24c:	e0 16       	cp	r14, r16
 24e:	f1 06       	cpc	r15, r17
 250:	0c f0       	brlt	.+2      	; 0x254 <sendPacket+0xc4>
 252:	bc cf       	rjmp	.-136    	; 0x1cc <sendPacket+0x3c>
			default:
			break;
		}
		_delay_us(90);
	}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
 264:	bf 90       	pop	r11
 266:	af 90       	pop	r10
 268:	9f 90       	pop	r9
 26a:	8f 90       	pop	r8
 26c:	08 95       	ret

0000026e <main>:
	TWDR = reg_value;
	TWCR |= (1 << TWINT);
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
}

int main(void) {
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	2f 97       	sbiw	r28, 0x0f	; 15
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61

	int i;
	uint8_t data[5];
	uint8_t seg_codes[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	e0 e0       	ldi	r30, 0x00	; 0
 286:	f1 e0       	ldi	r31, 0x01	; 1
 288:	de 01       	movw	r26, r28
 28a:	16 96       	adiw	r26, 0x06	; 6
 28c:	01 90       	ld	r0, Z+
 28e:	0d 92       	st	X+, r0
 290:	8a 95       	dec	r24
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x1e>

	//ADMUX |= (1 << REFS1) | (1 << REFS0);		// Set the internal reference and mux
	
	ADCSRA |= (1 << ADEN) | (1 << ADIE); 					// "ADC Enable" schaltet den ADC ein und der Interrupt für wenn eine Conversion fertig ist ein
 294:	ea e7       	ldi	r30, 0x7A	; 122
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	88 68       	ori	r24, 0x88	; 136
 29c:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// Prescaler wird auf 128 eingestellt und man erhält bei 16MHz eine Frequenz von 125kHz
 29e:	80 81       	ld	r24, Z
 2a0:	87 60       	ori	r24, 0x07	; 7
 2a2:	80 83       	st	Z, r24

	initTWI(0b01001000); // Enabling all needed interrupts, the Two Wire Interface and setting the Bit-Rate Register
 2a4:	88 e4       	ldi	r24, 0x48	; 72
 2a6:	0e 94 ab 00 	call	0x156	; 0x156 <initTWI>

	sei();
 2aa:	78 94       	sei
	
	while(1) {
		
		ADCSRA |= (1 << ADSC);
 2ac:	0f 2e       	mov	r0, r31
 2ae:	fa e7       	ldi	r31, 0x7A	; 122
 2b0:	ef 2e       	mov	r14, r31
 2b2:	f1 2c       	mov	r15, r1
 2b4:	f0 2d       	mov	r31, r0
		
		_delay_ms(200);
		
		data[0] = 0b01000111;
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f7 e4       	ldi	r31, 0x47	; 71
 2ba:	df 2e       	mov	r13, r31
 2bc:	f0 2d       	mov	r31, r0

		for(i = 4; messung != 0; i--) { // In der for-Schleife teilt er diese Zahl in ihre einzelnen Stellen auf z.B: 2 2 6 9 und speichert
									 // sie in 7-Seg Form in dem Daten-Array
			data[i] = seg_codes[messung % 10];
 2be:	0a e0       	ldi	r16, 0x0A	; 10
 2c0:	10 e0       	ldi	r17, 0x00	; 0

	sei();
	
	while(1) {
		
		ADCSRA |= (1 << ADSC);
 2c2:	f7 01       	movw	r30, r14
 2c4:	80 81       	ld	r24, Z
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	ff ef       	ldi	r31, 0xFF	; 255
 2cc:	23 ec       	ldi	r18, 0xC3	; 195
 2ce:	89 e0       	ldi	r24, 0x09	; 9
 2d0:	f1 50       	subi	r31, 0x01	; 1
 2d2:	20 40       	sbci	r18, 0x00	; 0
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0x62>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <main+0x6c>
 2da:	00 00       	nop
		
		_delay_ms(200);
		
		data[0] = 0b01000111;
 2dc:	d9 82       	std	Y+1, r13	; 0x01

		for(i = 4; messung != 0; i--) { // In der for-Schleife teilt er diese Zahl in ihre einzelnen Stellen auf z.B: 2 2 6 9 und speichert
 2de:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <messung>
 2e2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <messung+0x1>
 2e6:	00 97       	sbiw	r24, 0x00	; 0
 2e8:	c1 f0       	breq	.+48     	; 0x31a <main+0xac>
 2ea:	9e 01       	movw	r18, r28
 2ec:	2a 5f       	subi	r18, 0xFA	; 250
 2ee:	3f 4f       	sbci	r19, 0xFF	; 255
									 // sie in 7-Seg Form in dem Daten-Array
			data[i] = seg_codes[messung % 10];
 2f0:	b8 01       	movw	r22, r16
 2f2:	0e 94 97 01 	call	0x32e	; 0x32e <__divmodhi4>
 2f6:	e6 e0       	ldi	r30, 0x06	; 6
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ec 0f       	add	r30, r28
 2fc:	fd 1f       	adc	r31, r29
 2fe:	e8 0f       	add	r30, r24
 300:	f9 1f       	adc	r31, r25
 302:	80 81       	ld	r24, Z
 304:	f9 01       	movw	r30, r18
 306:	82 93       	st	-Z, r24
 308:	9f 01       	movw	r18, r30
			messung = messung / 10;
 30a:	86 2f       	mov	r24, r22
 30c:	97 2f       	mov	r25, r23
		
		_delay_ms(200);
		
		data[0] = 0b01000111;

		for(i = 4; messung != 0; i--) { // In der for-Schleife teilt er diese Zahl in ihre einzelnen Stellen auf z.B: 2 2 6 9 und speichert
 30e:	00 97       	sbiw	r24, 0x00	; 0
 310:	79 f7       	brne	.-34     	; 0x2f0 <main+0x82>
 312:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <messung+0x1>
 316:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <messung>
									 // sie in 7-Seg Form in dem Daten-Array
			data[i] = seg_codes[messung % 10];
			messung = messung / 10;
		}
		sendPacket(5, 0x70, 0x00, data); // Sending the data of the seconds and minutes to the display chip, 0x70 = Display Address
 31a:	9e 01       	movw	r18, r28
 31c:	2f 5f       	subi	r18, 0xFF	; 255
 31e:	3f 4f       	sbci	r19, 0xFF	; 255
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	60 e7       	ldi	r22, 0x70	; 112
 324:	85 e0       	ldi	r24, 0x05	; 5
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 c8 00 	call	0x190	; 0x190 <sendPacket>
	}
 32c:	ca cf       	rjmp	.-108    	; 0x2c2 <main+0x54>

0000032e <__divmodhi4>:
 32e:	97 fb       	bst	r25, 7
 330:	07 2e       	mov	r0, r23
 332:	16 f4       	brtc	.+4      	; 0x338 <__divmodhi4+0xa>
 334:	00 94       	com	r0
 336:	07 d0       	rcall	.+14     	; 0x346 <__divmodhi4_neg1>
 338:	77 fd       	sbrc	r23, 7
 33a:	09 d0       	rcall	.+18     	; 0x34e <__divmodhi4_neg2>
 33c:	0e 94 b1 01 	call	0x362	; 0x362 <__udivmodhi4>
 340:	07 fc       	sbrc	r0, 7
 342:	05 d0       	rcall	.+10     	; 0x34e <__divmodhi4_neg2>
 344:	3e f4       	brtc	.+14     	; 0x354 <__divmodhi4_exit>

00000346 <__divmodhi4_neg1>:
 346:	90 95       	com	r25
 348:	81 95       	neg	r24
 34a:	9f 4f       	sbci	r25, 0xFF	; 255
 34c:	08 95       	ret

0000034e <__divmodhi4_neg2>:
 34e:	70 95       	com	r23
 350:	61 95       	neg	r22
 352:	7f 4f       	sbci	r23, 0xFF	; 255

00000354 <__divmodhi4_exit>:
 354:	08 95       	ret

00000356 <__tablejump2__>:
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	05 90       	lpm	r0, Z+
 35c:	f4 91       	lpm	r31, Z
 35e:	e0 2d       	mov	r30, r0
 360:	09 94       	ijmp

00000362 <__udivmodhi4>:
 362:	aa 1b       	sub	r26, r26
 364:	bb 1b       	sub	r27, r27
 366:	51 e1       	ldi	r21, 0x11	; 17
 368:	07 c0       	rjmp	.+14     	; 0x378 <__udivmodhi4_ep>

0000036a <__udivmodhi4_loop>:
 36a:	aa 1f       	adc	r26, r26
 36c:	bb 1f       	adc	r27, r27
 36e:	a6 17       	cp	r26, r22
 370:	b7 07       	cpc	r27, r23
 372:	10 f0       	brcs	.+4      	; 0x378 <__udivmodhi4_ep>
 374:	a6 1b       	sub	r26, r22
 376:	b7 0b       	sbc	r27, r23

00000378 <__udivmodhi4_ep>:
 378:	88 1f       	adc	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	5a 95       	dec	r21
 37e:	a9 f7       	brne	.-22     	; 0x36a <__udivmodhi4_loop>
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	bc 01       	movw	r22, r24
 386:	cd 01       	movw	r24, r26
 388:	08 95       	ret

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
