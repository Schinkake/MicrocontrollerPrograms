
TWI_Data_Transmission.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000003fe  00000492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800114  00800114  000004a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e1  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000726  00000000  00000000  00000e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d4  00000000  00000000  00001557  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e6  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021f  00000000  00000000  00001dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001fcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  60:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_24>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  68:	27 01       	movw	r4, r14
  6a:	d6 01       	movw	r26, r12
  6c:	d6 01       	movw	r26, r12
  6e:	d6 01       	movw	r26, r12
  70:	d6 01       	movw	r26, r12
  72:	d6 01       	movw	r26, r12
  74:	d6 01       	movw	r26, r12
  76:	d6 01       	movw	r26, r12
  78:	2c 01       	movw	r4, r24
  7a:	d6 01       	movw	r26, r12
  7c:	d6 01       	movw	r26, r12
  7e:	d6 01       	movw	r26, r12
  80:	d6 01       	movw	r26, r12
  82:	d6 01       	movw	r26, r12
  84:	d6 01       	movw	r26, r12
  86:	d6 01       	movw	r26, r12
  88:	35 01       	movw	r6, r10
  8a:	d6 01       	movw	r26, r12
  8c:	d6 01       	movw	r26, r12
  8e:	d6 01       	movw	r26, r12
  90:	d6 01       	movw	r26, r12
  92:	d6 01       	movw	r26, r12
  94:	d6 01       	movw	r26, r12
  96:	d6 01       	movw	r26, r12
  98:	3a 01       	movw	r6, r20
  9a:	d6 01       	movw	r26, r12
  9c:	d6 01       	movw	r26, r12
  9e:	d6 01       	movw	r26, r12
  a0:	d6 01       	movw	r26, r12
  a2:	d6 01       	movw	r26, r12
  a4:	d6 01       	movw	r26, r12
  a6:	d6 01       	movw	r26, r12
  a8:	3f 01       	movw	r6, r30
  aa:	d6 01       	movw	r26, r12
  ac:	d6 01       	movw	r26, r12
  ae:	d6 01       	movw	r26, r12
  b0:	d6 01       	movw	r26, r12
  b2:	d6 01       	movw	r26, r12
  b4:	d6 01       	movw	r26, r12
  b6:	d6 01       	movw	r26, r12
  b8:	82 01       	movw	r16, r4
  ba:	d6 01       	movw	r26, r12
  bc:	d6 01       	movw	r26, r12
  be:	d6 01       	movw	r26, r12
  c0:	d6 01       	movw	r26, r12
  c2:	d6 01       	movw	r26, r12
  c4:	d6 01       	movw	r26, r12
  c6:	d6 01       	movw	r26, r12
  c8:	ca 01       	movw	r24, r20

000000ca <__ctors_end>:
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf ef       	ldi	r28, 0xFF	; 255
  d0:	d8 e0       	ldi	r29, 0x08	; 8
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
  d6:	11 e0       	ldi	r17, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	ee ef       	ldi	r30, 0xFE	; 254
  de:	f3 e0       	ldi	r31, 0x03	; 3
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
  e2:	05 90       	lpm	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	a4 31       	cpi	r26, 0x14	; 20
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	a4 e1       	ldi	r26, 0x14	; 20
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	a0 32       	cpi	r26, 0x20	; 32
  f8:	b2 07       	cpc	r27, r18
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
  fc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <main>
 100:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <_exit>

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <sendDataByte>:
int i = 0, j = 0, arr[4] = {0};
int status_value;
int seg_codes[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
	
void sendDataByte(int reg_value) {
	TWDR = reg_value;
 108:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR |= (1 << TWINT);
 10c:	ec eb       	ldi	r30, 0xBC	; 188
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 68       	ori	r24, 0x80	; 128
 114:	80 83       	st	Z, r24
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
 116:	80 81       	ld	r24, Z
 118:	8f 7c       	andi	r24, 0xCF	; 207
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <counter>:
}

int counter(int cnt) {
	switch(cnt) {
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	91 05       	cpc	r25, r1
 122:	19 f1       	breq	.+70     	; 0x16a <counter+0x4c>
 124:	1c f4       	brge	.+6      	; 0x12c <counter+0xe>
 126:	89 2b       	or	r24, r25
 128:	41 f0       	breq	.+16     	; 0x13a <counter+0x1c>
 12a:	67 c0       	rjmp	.+206    	; 0x1fa <counter+0xdc>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	91 05       	cpc	r25, r1
 130:	a1 f1       	breq	.+104    	; 0x19a <counter+0x7c>
 132:	03 97       	sbiw	r24, 0x03	; 3
 134:	09 f4       	brne	.+2      	; 0x138 <counter+0x1a>
 136:	49 c0       	rjmp	.+146    	; 0x1ca <counter+0xac>
 138:	60 c0       	rjmp	.+192    	; 0x1fa <counter+0xdc>
		case 0:
			if(arr[cnt] > 9) {
 13a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 13e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 142:	8a 30       	cpi	r24, 0x0A	; 10
 144:	91 05       	cpc	r25, r1
 146:	4c f0       	brlt	.+18     	; 0x15a <counter+0x3c>
				arr[cnt] = 0;
				return arr[cnt]++;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 150:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	08 95       	ret
			}
			else {
				return arr[cnt]++;
 15a:	9c 01       	movw	r18, r24
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__data_end+0x1>
 164:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__data_end>
 168:	08 95       	ret
			}
			break;
		case 1:
			if(arr[cnt] > 9) {
 16a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 16e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x3>
 172:	8a 30       	cpi	r24, 0x0A	; 10
 174:	91 05       	cpc	r25, r1
 176:	4c f0       	brlt	.+18     	; 0x18a <counter+0x6c>
				arr[cnt] = 0;
				return arr[cnt]++;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x3>
 180:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end+0x2>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	08 95       	ret
			}
			else {
				return arr[cnt]++;
 18a:	9c 01       	movw	r18, r24
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
 190:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__data_end+0x3>
 194:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__data_end+0x2>
 198:	08 95       	ret
			}
			break;
		case 2:
			if(arr[cnt] > 9) {
 19a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end+0x4>
 19e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x5>
 1a2:	8a 30       	cpi	r24, 0x0A	; 10
 1a4:	91 05       	cpc	r25, r1
 1a6:	4c f0       	brlt	.+18     	; 0x1ba <counter+0x9c>
				arr[cnt] = 0;
				return arr[cnt]++;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x5>
 1b0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x4>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	08 95       	ret
			}
			else {
				return arr[cnt]++;
 1ba:	9c 01       	movw	r18, r24
 1bc:	2f 5f       	subi	r18, 0xFF	; 255
 1be:	3f 4f       	sbci	r19, 0xFF	; 255
 1c0:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__data_end+0x5>
 1c4:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__data_end+0x4>
 1c8:	08 95       	ret
			}
			break;
		case 3:
			if(arr[cnt] > 9) {
 1ca:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x6>
 1ce:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x7>
 1d2:	8a 30       	cpi	r24, 0x0A	; 10
 1d4:	91 05       	cpc	r25, r1
 1d6:	4c f0       	brlt	.+18     	; 0x1ea <counter+0xcc>
				arr[cnt] = 0;
				return arr[cnt]++;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x7>
 1e0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end+0x6>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	08 95       	ret
			}
			else {
				return arr[cnt]++;
 1ea:	9c 01       	movw	r18, r24
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <__data_end+0x7>
 1f4:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end+0x6>
 1f8:	08 95       	ret
			}
			break;
		default:
			return -1;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
 1fe:	08 95       	ret

00000200 <__vector_24>:

ISR(TWI_vect) {
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	
	status_value = TWSR;
 222:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 226:	e8 2f       	mov	r30, r24
 228:	e8 7f       	andi	r30, 0xF8	; 248
	status_value &= 0b11111000;
 22a:	8e 2f       	mov	r24, r30
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <status_value+0x1>
 232:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <status_value>
	
	switch(status_value) {
 236:	8e 2f       	mov	r24, r30
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	fc 01       	movw	r30, r24
 23c:	38 97       	sbiw	r30, 0x08	; 8
 23e:	e1 33       	cpi	r30, 0x31	; 49
 240:	f1 05       	cpc	r31, r1
 242:	08 f0       	brcs	.+2      	; 0x246 <__vector_24+0x46>
 244:	b3 c0       	rjmp	.+358    	; 0x3ac <__vector_24+0x1ac>
 246:	ec 5c       	subi	r30, 0xCC	; 204
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__tablejump2__>
		case 0x08:
			sendDataByte(0x70);
 24e:	80 e7       	ldi	r24, 0x70	; 112
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
			break;
 256:	aa c0       	rjmp	.+340    	; 0x3ac <__vector_24+0x1ac>
		case 0x10:
			i = 0;
 258:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <i+0x1>
 25c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <i>
			sendDataByte(0x70);
 260:	80 e7       	ldi	r24, 0x70	; 112
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
		break;
 268:	a1 c0       	rjmp	.+322    	; 0x3ac <__vector_24+0x1ac>
		case 0x18:
			sendDataByte(0);
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
			break;
 272:	9c c0       	rjmp	.+312    	; 0x3ac <__vector_24+0x1ac>
		case 0x20:
			sendDataByte(0);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
			break;
 27c:	97 c0       	rjmp	.+302    	; 0x3ac <__vector_24+0x1ac>
		case 0x28:
			if(i == 0) {
 27e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i>
 282:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <i+0x1>
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	71 f4       	brne	.+28     	; 0x2a6 <__vector_24+0xa6>
				sendDataByte(0b01000111);
 28a:	87 e4       	ldi	r24, 0x47	; 71
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
				i++;
 292:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i>
 296:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <i+0x1>
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <i+0x1>
 2a0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <i>
 2a4:	83 c0       	rjmp	.+262    	; 0x3ac <__vector_24+0x1ac>
			}
			else if(i < 5) {
 2a6:	85 30       	cpi	r24, 0x05	; 5
 2a8:	91 05       	cpc	r25, r1
 2aa:	b4 f4       	brge	.+44     	; 0x2d8 <__vector_24+0xd8>
				sendDataByte(seg_codes[counter(i-1)]);
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	0e 94 8f 00 	call	0x11e	; 0x11e <counter>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	fc 01       	movw	r30, r24
 2b8:	e0 50       	subi	r30, 0x00	; 0
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	80 81       	ld	r24, Z
 2be:	91 81       	ldd	r25, Z+1	; 0x01
 2c0:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
				i++;
 2c4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i>
 2c8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <i+0x1>
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <i+0x1>
 2d2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <i>
 2d6:	6a c0       	rjmp	.+212    	; 0x3ac <__vector_24+0x1ac>
			}
			else {
				i = 0;
 2d8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <i+0x1>
 2dc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <i>
				TWCR |= (1 << TWINT) | (1 << TWSTA);
 2e0:	ec eb       	ldi	r30, 0xBC	; 188
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	80 6a       	ori	r24, 0xA0	; 160
 2e8:	80 83       	st	Z, r24
				TWCR &= ~(1 << TWSTO);
 2ea:	80 81       	ld	r24, Z
 2ec:	8f 7e       	andi	r24, 0xEF	; 239
 2ee:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	87 e8       	ldi	r24, 0x87	; 135
 2f4:	93 e1       	ldi	r25, 0x13	; 19
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <__vector_24+0xf6>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <__vector_24+0x100>
 300:	00 00       	nop
 302:	54 c0       	rjmp	.+168    	; 0x3ac <__vector_24+0x1ac>
				_delay_ms(400);
			}
			break;
		case 0x30:
			if(i == 1) {
 304:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i>
 308:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <i+0x1>
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	91 05       	cpc	r25, r1
 310:	71 f4       	brne	.+28     	; 0x32e <__vector_24+0x12e>
				sendDataByte(0b01000111);
 312:	87 e4       	ldi	r24, 0x47	; 71
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
				i++;
 31a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i>
 31e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <i+0x1>
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <i+0x1>
 328:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <i>
 32c:	3f c0       	rjmp	.+126    	; 0x3ac <__vector_24+0x1ac>
			}
			else if(i < 6) {
 32e:	86 30       	cpi	r24, 0x06	; 6
 330:	91 05       	cpc	r25, r1
 332:	d4 f4       	brge	.+52     	; 0x368 <__vector_24+0x168>
				sendDataByte(seg_codes[counter(--i)]);
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <i+0x1>
 33a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <i>
 33e:	0e 94 8f 00 	call	0x11e	; 0x11e <counter>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	fc 01       	movw	r30, r24
 348:	e0 50       	subi	r30, 0x00	; 0
 34a:	ff 4f       	sbci	r31, 0xFF	; 255
 34c:	80 81       	ld	r24, Z
 34e:	91 81       	ldd	r25, Z+1	; 0x01
 350:	0e 94 84 00 	call	0x108	; 0x108 <sendDataByte>
				i++;
 354:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i>
 358:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <i+0x1>
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <i+0x1>
 362:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <i>
 366:	22 c0       	rjmp	.+68     	; 0x3ac <__vector_24+0x1ac>
			}
			else {
				i = 0;
 368:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <i+0x1>
 36c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <i>
 370:	2f ef       	ldi	r18, 0xFF	; 255
 372:	87 e8       	ldi	r24, 0x87	; 135
 374:	93 e1       	ldi	r25, 0x13	; 19
 376:	21 50       	subi	r18, 0x01	; 1
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <__vector_24+0x176>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <__vector_24+0x180>
 380:	00 00       	nop
				_delay_ms(400);
				TWCR |= (1 << TWINT) | (1 << TWSTA);
 382:	ec eb       	ldi	r30, 0xBC	; 188
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	80 6a       	ori	r24, 0xA0	; 160
 38a:	80 83       	st	Z, r24
				TWCR &= ~(1 << TWSTO);
 38c:	80 81       	ld	r24, Z
 38e:	8f 7e       	andi	r24, 0xEF	; 239
 390:	80 83       	st	Z, r24
 392:	0c c0       	rjmp	.+24     	; 0x3ac <__vector_24+0x1ac>
			}
			break;
		case 0x38:
			i = 0;
 394:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <i+0x1>
 398:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <i>
			TWCR |= (1 << TWINT) | (1 << TWSTA);
 39c:	ec eb       	ldi	r30, 0xBC	; 188
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	80 6a       	ori	r24, 0xA0	; 160
 3a4:	80 83       	st	Z, r24
			TWCR &= ~(1 << TWSTO);
 3a6:	80 81       	ld	r24, Z
 3a8:	8f 7e       	andi	r24, 0xEF	; 239
 3aa:	80 83       	st	Z, r24
			break;
		default:
			return;
	}
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <main>:

int main(void) {
	
	TWBR = 0b01001000;
 3ce:	88 e4       	ldi	r24, 0x48	; 72
 3d0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWSR = 0b11111000;
 3d4:	88 ef       	ldi	r24, 0xF8	; 248
 3d6:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWCR |= (1 << TWIE);
 3da:	ec eb       	ldi	r30, 0xBC	; 188
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	81 60       	ori	r24, 0x01	; 1
 3e2:	80 83       	st	Z, r24
	sei();
 3e4:	78 94       	sei
	
	TWCR |= (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 3e6:	80 81       	ld	r24, Z
 3e8:	84 6a       	ori	r24, 0xA4	; 164
 3ea:	80 83       	st	Z, r24
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <main+0x1e>

000003ee <__tablejump2__>:
 3ee:	ee 0f       	add	r30, r30
 3f0:	ff 1f       	adc	r31, r31
 3f2:	05 90       	lpm	r0, Z+
 3f4:	f4 91       	lpm	r31, Z
 3f6:	e0 2d       	mov	r30, r0
 3f8:	09 94       	ijmp

000003fa <_exit>:
 3fa:	f8 94       	cli

000003fc <__stop_program>:
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <__stop_program>
