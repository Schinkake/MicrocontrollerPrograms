
TWI_Data_Transmission_from_Clock_Chip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000464  000004f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  00000502  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad7  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074c  00000000  00000000  000010a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f0  00000000  00000000  000017ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000489  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000483  00000000  00000000  00002295  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_24>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  68:	e9 00       	.word	0x00e9	; ????
  6a:	13 01       	movw	r2, r6
  6c:	13 01       	movw	r2, r6
  6e:	13 01       	movw	r2, r6
  70:	13 01       	movw	r2, r6
  72:	13 01       	movw	r2, r6
  74:	13 01       	movw	r2, r6
  76:	13 01       	movw	r2, r6
  78:	ed 00       	.word	0x00ed	; ????
  7a:	13 01       	movw	r2, r6
  7c:	13 01       	movw	r2, r6
  7e:	13 01       	movw	r2, r6
  80:	13 01       	movw	r2, r6
  82:	13 01       	movw	r2, r6
  84:	13 01       	movw	r2, r6
  86:	13 01       	movw	r2, r6
  88:	f1 00       	.word	0x00f1	; ????
  8a:	13 01       	movw	r2, r6
  8c:	13 01       	movw	r2, r6
  8e:	13 01       	movw	r2, r6
  90:	13 01       	movw	r2, r6
  92:	13 01       	movw	r2, r6
  94:	13 01       	movw	r2, r6
  96:	13 01       	movw	r2, r6
  98:	f5 00       	.word	0x00f5	; ????
  9a:	13 01       	movw	r2, r6
  9c:	13 01       	movw	r2, r6
  9e:	13 01       	movw	r2, r6
  a0:	13 01       	movw	r2, r6
  a2:	13 01       	movw	r2, r6
  a4:	13 01       	movw	r2, r6
  a6:	13 01       	movw	r2, r6
  a8:	f8 00       	.word	0x00f8	; ????
  aa:	13 01       	movw	r2, r6
  ac:	13 01       	movw	r2, r6
  ae:	13 01       	movw	r2, r6
  b0:	13 01       	movw	r2, r6
  b2:	13 01       	movw	r2, r6
  b4:	13 01       	movw	r2, r6
  b6:	13 01       	movw	r2, r6
  b8:	0a 01       	movw	r0, r20
  ba:	13 01       	movw	r2, r6
  bc:	13 01       	movw	r2, r6
  be:	13 01       	movw	r2, r6
  c0:	13 01       	movw	r2, r6
  c2:	13 01       	movw	r2, r6
  c4:	13 01       	movw	r2, r6
  c6:	13 01       	movw	r2, r6
  c8:	0d 01       	movw	r0, r26

000000ca <__ctors_end>:
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf ef       	ldi	r28, 0xFF	; 255
  d0:	d8 e0       	ldi	r29, 0x08	; 8
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
  d6:	11 e0       	ldi	r17, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	e4 e6       	ldi	r30, 0x64	; 100
  de:	f4 e0       	ldi	r31, 0x04	; 4
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
  e2:	05 90       	lpm	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	aa 30       	cpi	r26, 0x0A	; 10
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>

000000ec <__do_clear_bss>:
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	aa e0       	ldi	r26, 0x0A	; 10
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	ab 30       	cpi	r26, 0x0B	; 11
  f8:	b2 07       	cpc	r27, r18
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>
  fc:	0e 94 b1 01 	call	0x362	; 0x362 <main>
 100:	0c 94 30 02 	jmp	0x460	; 0x460 <_exit>

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <__vector_24>:
#include <avr/interrupt.h>
#include <util/delay.h>

uint8_t status_byte;

ISR(TWI_vect) {
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
	status_byte = TWSR;
 114:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	status_byte &= 0b11111000;
 118:	88 7f       	andi	r24, 0xF8	; 248
 11a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <initTWI>:

void sendPacket(int data_length, uint8_t address_byte, uint8_t instruction_byte, uint8_t data[]);
void recievePacket(int data_length, uint8_t address_byte, uint8_t clock_data[], uint8_t data[]);

void initTWI(uint8_t bitRate_byte) {
	TWBR = bitRate_byte;
 12a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR |= (1 << TWIE) | (1 << TWEN);
 12e:	ec eb       	ldi	r30, 0xBC	; 188
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	85 60       	ori	r24, 0x05	; 5
 136:	80 83       	st	Z, r24
	sei();
 138:	78 94       	sei
 13a:	08 95       	ret

0000013c <stopCondition>:
}

void stopCondition() {
	TWCR |= (1 << TWINT) | (1 << TWSTO);
 13c:	ec eb       	ldi	r30, 0xBC	; 188
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 69       	ori	r24, 0x90	; 144
 144:	80 83       	st	Z, r24
	TWCR &= ~(1 << TWSTA);
 146:	80 81       	ld	r24, Z
 148:	8f 7d       	andi	r24, 0xDF	; 223
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret

0000014e <sendDataByte>:
}

void sendDataByte(int reg_value) {
	TWDR = reg_value;
 14e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR |= (1 << TWINT);
 152:	ec eb       	ldi	r30, 0xBC	; 188
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	80 83       	st	Z, r24
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
 15c:	80 81       	ld	r24, Z
 15e:	8f 7c       	andi	r24, 0xCF	; 207
 160:	80 83       	st	Z, r24
 162:	08 95       	ret

00000164 <recieveDataByte>:
}

void recieveDataByte() {
	TWCR |= (1 << TWINT) | (1 << TWEA);
 164:	ec eb       	ldi	r30, 0xBC	; 188
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 6c       	ori	r24, 0xC0	; 192
 16c:	80 83       	st	Z, r24
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
 16e:	80 81       	ld	r24, Z
 170:	8f 7c       	andi	r24, 0xCF	; 207
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <sendPacket>:
		data[4] = seg_codes[clock_data[0] & 0b00001111];
		sendPacket(5, 0x70, 0x00, data); // Sending the data of the seconds and minutes to the display chip, 0x70 = Display Address
	}
}

void sendPacket(int data_length, uint8_t address_byte, uint8_t instruction_byte, uint8_t data[]) {
 176:	8f 92       	push	r8
 178:	9f 92       	push	r9
 17a:	af 92       	push	r10
 17c:	bf 92       	push	r11
 17e:	cf 92       	push	r12
 180:	df 92       	push	r13
 182:	ef 92       	push	r14
 184:	ff 92       	push	r15
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	7c 01       	movw	r14, r24
	
	int i = 0;
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
 190:	ec eb       	ldi	r30, 0xBC	; 188
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	90 81       	ld	r25, Z
 196:	90 6a       	ori	r25, 0xA0	; 160
 198:	90 83       	st	Z, r25
	
	while(!(i > data_length)) {
 19a:	ff 20       	and	r15, r15
 19c:	0c f4       	brge	.+2      	; 0x1a0 <sendPacket+0x2a>
 19e:	4d c0       	rjmp	.+154    	; 0x23a <sendPacket+0xc4>
 1a0:	49 01       	movw	r8, r18
 1a2:	00 e0       	ldi	r16, 0x00	; 0
 1a4:	10 e0       	ldi	r17, 0x00	; 0
		
		while(!(TWCR & (1 << TWINT)));
 1a6:	cc eb       	ldi	r28, 0xBC	; 188
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
				break;
			case 0x10:
				sendDataByte(address_byte);
				break;
			case 0x18:
				sendDataByte(instruction_byte);
 1aa:	a4 2e       	mov	r10, r20
 1ac:	b1 2c       	mov	r11, r1
		switch(status_byte) {
			case 0x08:
				sendDataByte(address_byte);
				break;
			case 0x10:
				sendDataByte(address_byte);
 1ae:	c6 2e       	mov	r12, r22
 1b0:	d1 2c       	mov	r13, r1
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
	
	while(!(i > data_length)) {
		
		while(!(TWCR & (1 << TWINT)));
 1b2:	88 81       	ld	r24, Y
 1b4:	88 23       	and	r24, r24
 1b6:	ec f7       	brge	.-6      	; 0x1b2 <sendPacket+0x3c>
		
		switch(status_byte) {
 1b8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 1bc:	8e 2f       	mov	r24, r30
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	38 97       	sbiw	r30, 0x08	; 8
 1c4:	e1 33       	cpi	r30, 0x31	; 49
 1c6:	f1 05       	cpc	r31, r1
 1c8:	70 f5       	brcc	.+92     	; 0x226 <sendPacket+0xb0>
 1ca:	ec 5c       	subi	r30, 0xCC	; 204
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	0c 94 2a 02 	jmp	0x454	; 0x454 <__tablejump2__>
			case 0x08:
				sendDataByte(address_byte);
 1d2:	c6 01       	movw	r24, r12
 1d4:	0e 94 a7 00 	call	0x14e	; 0x14e <sendDataByte>
				break;
 1d8:	26 c0       	rjmp	.+76     	; 0x226 <sendPacket+0xb0>
			case 0x10:
				sendDataByte(address_byte);
 1da:	c6 01       	movw	r24, r12
 1dc:	0e 94 a7 00 	call	0x14e	; 0x14e <sendDataByte>
				break;
 1e0:	22 c0       	rjmp	.+68     	; 0x226 <sendPacket+0xb0>
			case 0x18:
				sendDataByte(instruction_byte);
 1e2:	c5 01       	movw	r24, r10
 1e4:	0e 94 a7 00 	call	0x14e	; 0x14e <sendDataByte>
				break;
 1e8:	1e c0       	rjmp	.+60     	; 0x226 <sendPacket+0xb0>
			case 0x20:
				stopCondition();
 1ea:	0e 94 9e 00 	call	0x13c	; 0x13c <stopCondition>
				break;
 1ee:	1b c0       	rjmp	.+54     	; 0x226 <sendPacket+0xb0>
			case 0x28:
				if(i < data_length) {
 1f0:	0e 15       	cp	r16, r14
 1f2:	1f 05       	cpc	r17, r15
 1f4:	54 f4       	brge	.+20     	; 0x20a <sendPacket+0x94>
					sendDataByte(data[i]);
 1f6:	f4 01       	movw	r30, r8
 1f8:	e0 0f       	add	r30, r16
 1fa:	f1 1f       	adc	r31, r17
 1fc:	80 81       	ld	r24, Z
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 a7 00 	call	0x14e	; 0x14e <sendDataByte>
					i++;
 204:	0f 5f       	subi	r16, 0xFF	; 255
 206:	1f 4f       	sbci	r17, 0xFF	; 255
 208:	0e c0       	rjmp	.+28     	; 0x226 <sendPacket+0xb0>
				}
				else {
					stopCondition();
 20a:	0e 94 9e 00 	call	0x13c	; 0x13c <stopCondition>
					i++;
 20e:	0f 5f       	subi	r16, 0xFF	; 255
 210:	1f 4f       	sbci	r17, 0xFF	; 255
 212:	09 c0       	rjmp	.+18     	; 0x226 <sendPacket+0xb0>
				}
				break;
			case 0x30:
				stopCondition();
 214:	0e 94 9e 00 	call	0x13c	; 0x13c <stopCondition>
				break;
 218:	06 c0       	rjmp	.+12     	; 0x226 <sendPacket+0xb0>
			case 0x38:
				TWCR |= (1 << TWINT) | (1 << TWSTA); // Wait until the Bus is free and then send a START
 21a:	88 81       	ld	r24, Y
 21c:	80 6a       	ori	r24, 0xA0	; 160
 21e:	88 83       	st	Y, r24
				TWCR &= ~(1 << TWSTO);
 220:	88 81       	ld	r24, Y
 222:	8f 7e       	andi	r24, 0xEF	; 239
 224:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	87 e6       	ldi	r24, 0x67	; 103
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <sendPacket+0xb4>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <sendPacket+0xba>
 230:	00 00       	nop
	
	int i = 0;
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
	
	while(!(i > data_length)) {
 232:	e0 16       	cp	r14, r16
 234:	f1 06       	cpc	r15, r17
 236:	0c f0       	brlt	.+2      	; 0x23a <sendPacket+0xc4>
 238:	bc cf       	rjmp	.-136    	; 0x1b2 <sendPacket+0x3c>
			default:
				break;
		}
		_delay_us(90);
	}
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	bf 90       	pop	r11
 24c:	af 90       	pop	r10
 24e:	9f 90       	pop	r9
 250:	8f 90       	pop	r8
 252:	08 95       	ret

00000254 <recievePacket>:

void recievePacket(int data_length, uint8_t address_byte, uint8_t clock_data[], uint8_t data[]) {
 254:	8f 92       	push	r8
 256:	9f 92       	push	r9
 258:	af 92       	push	r10
 25a:	bf 92       	push	r11
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	8c 01       	movw	r16, r24
	
	int i = 0;
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
 26e:	ec eb       	ldi	r30, 0xBC	; 188
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	90 81       	ld	r25, Z
 274:	90 6a       	ori	r25, 0xA0	; 160
 276:	90 83       	st	Z, r25
	
	while(!(i > data_length)) {
 278:	11 23       	and	r17, r17
 27a:	0c f4       	brge	.+2      	; 0x27e <recievePacket+0x2a>
 27c:	65 c0       	rjmp	.+202    	; 0x348 <recievePacket+0xf4>
 27e:	6a 01       	movw	r12, r20
 280:	81 2c       	mov	r8, r1
 282:	91 2c       	mov	r9, r1
		
		while(!(TWCR & (1 << TWINT)));
 284:	cc eb       	ldi	r28, 0xBC	; 188
 286:	d0 e0       	ldi	r29, 0x00	; 0
					clock_data[i] = TWDR;
					recieveDataByte();
					i++;
				}
				else {
					clock_data[i] = TWDR;
 288:	0f 2e       	mov	r0, r31
 28a:	fb eb       	ldi	r31, 0xBB	; 187
 28c:	af 2e       	mov	r10, r31
 28e:	b1 2c       	mov	r11, r1
 290:	f0 2d       	mov	r31, r0
		switch(status_byte) {
			case 0x08:
				sendDataByte(address_byte + 1);
				break;
			case 0x10:
				sendDataByte(address_byte + 1);
 292:	e6 2e       	mov	r14, r22
 294:	f1 2c       	mov	r15, r1
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	e8 1a       	sub	r14, r24
 29a:	f8 0a       	sbc	r15, r24
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
	
	while(!(i > data_length)) {
		
		while(!(TWCR & (1 << TWINT)));
 29c:	88 81       	ld	r24, Y
 29e:	88 23       	and	r24, r24
 2a0:	ec f7       	brge	.-6      	; 0x29c <recievePacket+0x48>
		
		switch(status_byte) {
 2a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2a6:	80 34       	cpi	r24, 0x40	; 64
 2a8:	f1 f0       	breq	.+60     	; 0x2e6 <recievePacket+0x92>
 2aa:	38 f4       	brcc	.+14     	; 0x2ba <recievePacket+0x66>
 2ac:	80 31       	cpi	r24, 0x10	; 16
 2ae:	81 f0       	breq	.+32     	; 0x2d0 <recievePacket+0x7c>
 2b0:	88 33       	cpi	r24, 0x38	; 56
 2b2:	91 f0       	breq	.+36     	; 0x2d8 <recievePacket+0x84>
 2b4:	88 30       	cpi	r24, 0x08	; 8
 2b6:	f1 f5       	brne	.+124    	; 0x334 <recievePacket+0xe0>
 2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <recievePacket+0x74>
 2ba:	80 35       	cpi	r24, 0x50	; 80
 2bc:	d1 f0       	breq	.+52     	; 0x2f2 <recievePacket+0x9e>
 2be:	88 35       	cpi	r24, 0x58	; 88
 2c0:	b9 f1       	breq	.+110    	; 0x330 <recievePacket+0xdc>
 2c2:	88 34       	cpi	r24, 0x48	; 72
 2c4:	b9 f5       	brne	.+110    	; 0x334 <recievePacket+0xe0>
 2c6:	12 c0       	rjmp	.+36     	; 0x2ec <recievePacket+0x98>
			case 0x08:
				sendDataByte(address_byte + 1);
 2c8:	c7 01       	movw	r24, r14
 2ca:	0e 94 a7 00 	call	0x14e	; 0x14e <sendDataByte>
				break;
 2ce:	32 c0       	rjmp	.+100    	; 0x334 <recievePacket+0xe0>
			case 0x10:
				sendDataByte(address_byte + 1);
 2d0:	c7 01       	movw	r24, r14
 2d2:	0e 94 a7 00 	call	0x14e	; 0x14e <sendDataByte>
				break;
 2d6:	2e c0       	rjmp	.+92     	; 0x334 <recievePacket+0xe0>
			case 0x38:
				TWCR |= (1 << TWINT) | (1 << TWSTA); // Wait until the Bus is free and then send a START
 2d8:	88 81       	ld	r24, Y
 2da:	80 6a       	ori	r24, 0xA0	; 160
 2dc:	88 83       	st	Y, r24
				TWCR &= ~(1 << TWSTO);
 2de:	88 81       	ld	r24, Y
 2e0:	8f 7e       	andi	r24, 0xEF	; 239
 2e2:	88 83       	st	Y, r24
				break;
 2e4:	27 c0       	rjmp	.+78     	; 0x334 <recievePacket+0xe0>
			case 0x40:
				recieveDataByte(); // Send instruction to recieve 1 data byte and return an ACK
 2e6:	0e 94 b2 00 	call	0x164	; 0x164 <recieveDataByte>
				break;
 2ea:	24 c0       	rjmp	.+72     	; 0x334 <recievePacket+0xe0>
			case 0x48:
				stopCondition();
 2ec:	0e 94 9e 00 	call	0x13c	; 0x13c <stopCondition>
				break;
 2f0:	21 c0       	rjmp	.+66     	; 0x334 <recievePacket+0xe0>
			case 0x50:
				if(i < data_length) {
 2f2:	80 16       	cp	r8, r16
 2f4:	91 06       	cpc	r9, r17
 2f6:	64 f4       	brge	.+24     	; 0x310 <recievePacket+0xbc>
					clock_data[i] = TWDR;
 2f8:	f5 01       	movw	r30, r10
 2fa:	80 81       	ld	r24, Z
 2fc:	f6 01       	movw	r30, r12
 2fe:	e8 0d       	add	r30, r8
 300:	f9 1d       	adc	r31, r9
 302:	80 83       	st	Z, r24
					recieveDataByte();
 304:	0e 94 b2 00 	call	0x164	; 0x164 <recieveDataByte>
					i++;
 308:	ff ef       	ldi	r31, 0xFF	; 255
 30a:	8f 1a       	sub	r8, r31
 30c:	9f 0a       	sbc	r9, r31
 30e:	12 c0       	rjmp	.+36     	; 0x334 <recievePacket+0xe0>
				}
				else {
					clock_data[i] = TWDR;
 310:	f5 01       	movw	r30, r10
 312:	80 81       	ld	r24, Z
 314:	f6 01       	movw	r30, r12
 316:	e8 0d       	add	r30, r8
 318:	f9 1d       	adc	r31, r9
 31a:	80 83       	st	Z, r24
					TWCR |= (1 << TWINT); // Not ACK will be returned to get into status 0x58
 31c:	88 81       	ld	r24, Y
 31e:	80 68       	ori	r24, 0x80	; 128
 320:	88 83       	st	Y, r24
					TWCR &= ~((1 << TWSTA) | (1 << TWSTO) | (1 << TWEA));
 322:	88 81       	ld	r24, Y
 324:	8f 78       	andi	r24, 0x8F	; 143
 326:	88 83       	st	Y, r24
					i++;
 328:	ff ef       	ldi	r31, 0xFF	; 255
 32a:	8f 1a       	sub	r8, r31
 32c:	9f 0a       	sbc	r9, r31
 32e:	02 c0       	rjmp	.+4      	; 0x334 <recievePacket+0xe0>
				}
				break;
			case 0x58:
				stopCondition();
 330:	0e 94 9e 00 	call	0x13c	; 0x13c <stopCondition>
 334:	87 e6       	ldi	r24, 0x67	; 103
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <recievePacket+0xe4>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <recievePacket+0xea>
 33e:	00 00       	nop
	
	int i = 0;
	
	TWCR |= (1 << TWSTA) | (1 << TWINT);
	
	while(!(i > data_length)) {
 340:	08 15       	cp	r16, r8
 342:	19 05       	cpc	r17, r9
 344:	0c f0       	brlt	.+2      	; 0x348 <recievePacket+0xf4>
 346:	aa cf       	rjmp	.-172    	; 0x29c <recievePacket+0x48>
			default:
				break;
		}
		_delay_us(90);
	}
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	df 90       	pop	r13
 356:	cf 90       	pop	r12
 358:	bf 90       	pop	r11
 35a:	af 90       	pop	r10
 35c:	9f 90       	pop	r9
 35e:	8f 90       	pop	r8
 360:	08 95       	ret

00000362 <main>:
void recieveDataByte() {
	TWCR |= (1 << TWINT) | (1 << TWEA);
	TWCR &= ~((1 << TWSTA) | (1 << TWSTO));
}

int main(void) {
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	61 97       	sbiw	r28, 0x11	; 17
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t clock_data[2];
	uint8_t data[5];
	uint8_t seg_codes[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
 376:	8a e0       	ldi	r24, 0x0A	; 10
 378:	e0 e0       	ldi	r30, 0x00	; 0
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	de 01       	movw	r26, r28
 37e:	18 96       	adiw	r26, 0x08	; 8
 380:	01 90       	ld	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	8a 95       	dec	r24
 386:	e1 f7       	brne	.-8      	; 0x380 <main+0x1e>
	
	initTWI(0b01001000); // Enabling all needed interrupts, the Two Wire Interface and setting the Bit-Rate Register
 388:	88 e4       	ldi	r24, 0x48	; 72
 38a:	0e 94 95 00 	call	0x12a	; 0x12a <initTWI>
	
	data[0] = 0b10000000; // Control Reg.: Function Mode should stay 32768Hz. Stop counting flag must be set
 38e:	80 e8       	ldi	r24, 0x80	; 128
 390:	8b 83       	std	Y+3, r24	; 0x03
	data[1] = 0b00000000; // milli-seconds
 392:	1c 82       	std	Y+4, r1	; 0x04
	data[2] = 0b00000000; // seconds - Clock time
 394:	1d 82       	std	Y+5, r1	; 0x05
	data[3] = 0b00000000; // minutes
 396:	1e 82       	std	Y+6, r1	; 0x06
	data[4] = 0b00000000; // hours
 398:	1f 82       	std	Y+7, r1	; 0x07
	sendPacket(4, 0xA0, 0x00, data); // Sending the time data to the clock chip, 0xA0 = Clock Address,
 39a:	9e 01       	movw	r18, r28
 39c:	2d 5f       	subi	r18, 0xFD	; 253
 39e:	3f 4f       	sbci	r19, 0xFF	; 255
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	60 ea       	ldi	r22, 0xA0	; 160
 3a4:	84 e0       	ldi	r24, 0x04	; 4
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 bb 00 	call	0x176	; 0x176 <sendPacket>
	
	data[0] = 0b00000000; // Control Reg.: Stop counting flag must be reset
 3ac:	1b 82       	std	Y+3, r1	; 0x03
	sendPacket(1, 0xA0, 0x00, data);
 3ae:	9e 01       	movw	r18, r28
 3b0:	2d 5f       	subi	r18, 0xFD	; 253
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	60 ea       	ldi	r22, 0xA0	; 160
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 bb 00 	call	0x176	; 0x176 <sendPacket>
		 
		sendPacket(0, 0xA0, 0x02, data); // Preparing to start reading from the seconds register, 0xA0 = Clock Address, 
								   // instruction_byte = 2 sets position, so you can display milliseconds + seconds or seconds + minutes etc.
		recievePacket(1, 0xA0, clock_data, data); // Reading the values of the seconds and minutes

		data[0] = 0b01000111;
 3c0:	17 e4       	ldi	r17, 0x47	; 71
	data[0] = 0b00000000; // Control Reg.: Stop counting flag must be reset
	sendPacket(1, 0xA0, 0x00, data);
	
	while(1) {
		 
		sendPacket(0, 0xA0, 0x02, data); // Preparing to start reading from the seconds register, 0xA0 = Clock Address, 
 3c2:	9e 01       	movw	r18, r28
 3c4:	2d 5f       	subi	r18, 0xFD	; 253
 3c6:	3f 4f       	sbci	r19, 0xFF	; 255
 3c8:	42 e0       	ldi	r20, 0x02	; 2
 3ca:	60 ea       	ldi	r22, 0xA0	; 160
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 bb 00 	call	0x176	; 0x176 <sendPacket>
								   // instruction_byte = 2 sets position, so you can display milliseconds + seconds or seconds + minutes etc.
		recievePacket(1, 0xA0, clock_data, data); // Reading the values of the seconds and minutes
 3d4:	9e 01       	movw	r18, r28
 3d6:	2d 5f       	subi	r18, 0xFD	; 253
 3d8:	3f 4f       	sbci	r19, 0xFF	; 255
 3da:	ae 01       	movw	r20, r28
 3dc:	4f 5f       	subi	r20, 0xFF	; 255
 3de:	5f 4f       	sbci	r21, 0xFF	; 255
 3e0:	60 ea       	ldi	r22, 0xA0	; 160
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 2a 01 	call	0x254	; 0x254 <recievePacket>

		data[0] = 0b01000111;
 3ea:	1b 83       	std	Y+3, r17	; 0x03
		data[1] = seg_codes[clock_data[1] >> 4];
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	98 2f       	mov	r25, r24
 3f0:	92 95       	swap	r25
 3f2:	9f 70       	andi	r25, 0x0F	; 15
 3f4:	e8 e0       	ldi	r30, 0x08	; 8
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	ec 0f       	add	r30, r28
 3fa:	fd 1f       	adc	r31, r29
 3fc:	e9 0f       	add	r30, r25
 3fe:	f1 1d       	adc	r31, r1
 400:	90 81       	ld	r25, Z
 402:	9c 83       	std	Y+4, r25	; 0x04
		data[2] = seg_codes[clock_data[1] & 0b00001111];
 404:	8f 70       	andi	r24, 0x0F	; 15
 406:	e8 e0       	ldi	r30, 0x08	; 8
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	ec 0f       	add	r30, r28
 40c:	fd 1f       	adc	r31, r29
 40e:	e8 0f       	add	r30, r24
 410:	f1 1d       	adc	r31, r1
 412:	80 81       	ld	r24, Z
 414:	8d 83       	std	Y+5, r24	; 0x05
		data[3] = seg_codes[clock_data[0] >> 4];
 416:	89 81       	ldd	r24, Y+1	; 0x01
 418:	98 2f       	mov	r25, r24
 41a:	92 95       	swap	r25
 41c:	9f 70       	andi	r25, 0x0F	; 15
 41e:	e8 e0       	ldi	r30, 0x08	; 8
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	ec 0f       	add	r30, r28
 424:	fd 1f       	adc	r31, r29
 426:	e9 0f       	add	r30, r25
 428:	f1 1d       	adc	r31, r1
 42a:	90 81       	ld	r25, Z
 42c:	9e 83       	std	Y+6, r25	; 0x06
		data[4] = seg_codes[clock_data[0] & 0b00001111];
 42e:	8f 70       	andi	r24, 0x0F	; 15
 430:	e8 e0       	ldi	r30, 0x08	; 8
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	ec 0f       	add	r30, r28
 436:	fd 1f       	adc	r31, r29
 438:	e8 0f       	add	r30, r24
 43a:	f1 1d       	adc	r31, r1
 43c:	80 81       	ld	r24, Z
 43e:	8f 83       	std	Y+7, r24	; 0x07
		sendPacket(5, 0x70, 0x00, data); // Sending the data of the seconds and minutes to the display chip, 0x70 = Display Address
 440:	9e 01       	movw	r18, r28
 442:	2d 5f       	subi	r18, 0xFD	; 253
 444:	3f 4f       	sbci	r19, 0xFF	; 255
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	60 e7       	ldi	r22, 0x70	; 112
 44a:	85 e0       	ldi	r24, 0x05	; 5
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 bb 00 	call	0x176	; 0x176 <sendPacket>
 452:	b7 cf       	rjmp	.-146    	; 0x3c2 <main+0x60>

00000454 <__tablejump2__>:
 454:	ee 0f       	add	r30, r30
 456:	ff 1f       	adc	r31, r31
 458:	05 90       	lpm	r0, Z+
 45a:	f4 91       	lpm	r31, Z
 45c:	e0 2d       	mov	r30, r0
 45e:	09 94       	ijmp

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
