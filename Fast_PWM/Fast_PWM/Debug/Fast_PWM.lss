
Fast_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000168  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000712  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000067a  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028b  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000381  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int ud;

int main(void)
{
	DDRD |= (1 << DDD6);
  90:	56 9a       	sbi	0x0a, 6	; 10
	// PD6 is now an output

	OCR0A = 128;
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	87 bd       	out	0x27, r24	; 39
	// set PWM for 50% duty cycle

	TCCR0A |= (1 << COM0A1);
  96:	84 b5       	in	r24, 0x24	; 36
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	84 bd       	out	0x24, r24	; 36
	// set none-inverting mode

	TCCR0A |= (1 << WGM01) | (1 << WGM00);
  9c:	84 b5       	in	r24, 0x24	; 36
  9e:	83 60       	ori	r24, 0x03	; 3
  a0:	84 bd       	out	0x24, r24	; 36
	// set fast PWM Mode

	TCCR0B |= (1 << CS01);
  a2:	85 b5       	in	r24, 0x25	; 37
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	85 bd       	out	0x25, r24	; 37
				ud = 0;
		}
		else {
			OCR0A = OCR0A - 1;
			if(OCR0A == 0)
				ud = 1;
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
	TCCR0B |= (1 << CS01);
	// set prescaler to 8 and starts PWM

	while (1) {
		
		if(ud) {
  ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b4:	89 2b       	or	r24, r25
  b6:	59 f0       	breq	.+22     	; 0xce <main+0x3e>
			OCR0A = OCR0A + 1;
  b8:	87 b5       	in	r24, 0x27	; 39
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	87 bd       	out	0x27, r24	; 39
			if(OCR0A == 255)
  be:	87 b5       	in	r24, 0x27	; 39
  c0:	8f 3f       	cpi	r24, 0xFF	; 255
  c2:	79 f4       	brne	.+30     	; 0xe2 <main+0x52>
				ud = 0;
  c4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <main+0x52>
		}
		else {
			OCR0A = OCR0A - 1;
  ce:	87 b5       	in	r24, 0x27	; 39
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	87 bd       	out	0x27, r24	; 39
			if(OCR0A == 0)
  d4:	87 b5       	in	r24, 0x27	; 39
  d6:	81 11       	cpse	r24, r1
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <main+0x52>
				ud = 1;
  da:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
  de:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f e9       	ldi	r24, 0x9F	; 159
  e4:	9f e0       	ldi	r25, 0x0F	; 15
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x56>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x5c>
  ec:	00 00       	nop
  ee:	de cf       	rjmp	.-68     	; 0xac <main+0x1c>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
